{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DaxLib.SVG","text":"<p>A DAX User-Defined Functions (UDF) library designed to make creating SVG visuals in Power BI easier</p> <p>Download From DaxLib  Download Example PBIP  </p> <p>Getting Started</p> <ol> <li>Download the library from DaxLib</li> <li>Install using TMDL view</li> <li>Start using the functions in your measures</li> </ol> <p>For detailed examples, check out our example PBIP file</p> <p></p>"},{"location":"changeLog/","title":"Change Log","text":""},{"location":"changeLog/#012-beta-latest","title":"0.1.2-beta (Latest)","text":"<p> Restructured library will the idea of Elements and Compounds</p> <p> Documentation site launch</p>"},{"location":"changeLog/#011-beta","title":"0.1.1-beta","text":"<p> Fixed incorrect function references in <code>DaxLib.SVG.Example.BulletChart.ActionDot()</code></p>"},{"location":"changeLog/#010-beta","title":"0.1.0-beta","text":"<p> Initial release of the DaxLib.SVG library with support</p>"},{"location":"attributes/","title":"Attributes","text":"<p><code>Attr</code> functions help you generate strings to pass Attributes (i.e.<code>fill</code>, <code>stroke</code>, <code>opacity</code>) to <code>DaxLib.SVG.Element.*</code> and <code>DaxLib.SVG.Def.*</code> functions. These wrappers make it easier to apply fills, strokes, text formatting, and other visual properties in your SVG graphics.</p>"},{"location":"attributes/Shapes/","title":"Attr.Shapes","text":"<p>Creates SVG attribute strings for common shape styling properties</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Attr.Shapes( fill, fillOpacity, fillRule, stroke, strokeWidth, strokeOpacity, opacity )\n</code></pre> Parameter Type Required Description fill STRING Fill color (e.g., \"#FF0000\", \"red\") fillOpacity DOUBLE Fill opacity value between 0 and 1 fillRule STRING Fill rule (\"nonzero\", \"evenodd\") stroke STRING Stroke color (e.g., \"#000000\", \"black\") strokeWidth INT64 Width of the stroke strokeOpacity DOUBLE Stroke opacity value between 0 and 1 opacity DOUBLE Overall opacity value between 0 and 1 <p>STRING An attribute string that can be used directly in SVG elements</p> <pre><code>DaxLib.SVG.Attr.Shapes(\"#FF0000\", 0.8, \"nonzero\", \"#000000\", 2, 1, 1)\n// Returns \"fill='#FF0000' fill-opacity='0.8' fill-rule='nonzero' stroke='#000000' stroke-width='2' stroke-opacity='1' opacity='1' \"\n</code></pre> <pre><code>function 'DaxLib.SVG.Attr.Shapes' = \n    (\n        fill: STRING,\n        fillOpacity: DOUBLE,\n        fillRule: STRING,\n        stroke: STRING,\n        strokeWidth: INT64,\n        strokeOpacity: DOUBLE,\n        opacity: DOUBLE\n    ) =&gt;\n\n        IF( NOT ISBLANK( fill ),          \"fill='\" &amp; fill &amp; \"' \") &amp;\n        IF( NOT ISBLANK( fillOpacity ),   \"fill-opacity='\" &amp; fillOpacity &amp; \"' \") &amp;\n        IF( NOT ISBLANK( fillRule ),      \"fill-rule='\" &amp; fillRule &amp; \"' \") &amp;\n        IF( NOT ISBLANK( stroke ),        \"stroke='\" &amp; stroke &amp; \"' \") &amp;\n        IF( NOT ISBLANK( strokeWidth ),   \"stroke-width='\" &amp; strokeWidth &amp; \"' \") &amp;\n        IF( NOT ISBLANK( strokeOpacity ), \"stroke-opacity='\" &amp; strokeOpacity &amp; \"' \") &amp;\n        IF( NOT ISBLANK( opacity ),       \"opacity='\" &amp; opacity &amp; \"' \")\n</code></pre>"},{"location":"attributes/Stroke/","title":"Attr.Stroke","text":"<p>Creates SVG attribute strings for comprehensive stroke styling properties</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Attr.Stroke(stroke, strokeWidth, strokeOpacity, strokeDasharray, strokeDashoffset, strokeLinecap, strokeLinejoin, strokeMiterlimit, markerStart, markerMid, markerEnd)\n</code></pre> Parameter Type Required Description stroke STRING Stroke color (e.g., \"#FF0000\", \"red\") strokeWidth INT64 Stroke width strokeOpacity DOUBLE Stroke opacity (0-1) strokeDasharray STRING Stroke dasharray pattern (e.g., \"5,5\" for dashed) strokeDashoffset STRING Stroke dashoffset strokeLinecap STRING Stroke linecap (\"butt\", \"round\", \"square\") strokeLinejoin STRING Stroke linejoin (\"miter\", \"round\", \"bevel\") strokeMiterlimit STRING Miter limit for stroke joins markerStart STRING Marker for start of line (e.g., 'url(#arrowStart)') markerMid STRING Marker for middle points of line markerEnd STRING Marker for end of line (e.g., 'url(#arrowEnd)') <p>STRING An attribute string that can be used directly in SVG elements</p> <pre><code>DaxLib.SVG.Attr.Stroke(\"#0000FF\", 2, 1, \"5,5\", \"0\", \"round\", \"round\", \"\", \"\", \"\", \"url(#arrow)\")\n// Returns \"stroke='#0000FF' stroke-width='2' stroke-opacity='1' stroke-dasharray='5,5' stroke-dashoffset='0' stroke-linecap='round' stroke-linejoin='round' marker-end='url(#arrow)'\"\n</code></pre> <pre><code>function 'DaxLib.SVG.Attr.Stroke' = \n    (\n        stroke: STRING,\n        strokeWidth: INT64,\n        strokeOpacity: DOUBLE,\n        strokeDasharray: STRING,\n        strokeDashoffset: STRING,\n        strokeLinecap: STRING,\n        strokeLinejoin: STRING,\n        strokeMiterlimit: STRING,\n        markerStart: STRING,\n        markerMid: STRING,\n        markerEnd: STRING\n    ) =&gt;\n        VAR _Stroke =           IF(NOT ISBLANK(stroke),           \"stroke='\" &amp; stroke &amp; \"' \")\n        VAR _StrokeWidth =      IF(NOT ISBLANK(strokeWidth),      \"stroke-width='\" &amp; strokeWidth &amp; \"' \")\n        VAR _StrokeOpacity =    IF(NOT ISBLANK(strokeOpacity),    \"stroke-opacity='\" &amp; strokeOpacity &amp; \"' \")\n        VAR _StrokeDasharray =  IF(NOT ISBLANK(strokeDasharray),  \"stroke-dasharray='\" &amp; strokeDasharray &amp; \"' \")\n        VAR _StrokeDashoffset = IF(NOT ISBLANK(strokeDashoffset), \"stroke-dashoffset='\" &amp; strokeDashoffset &amp; \"' \")\n        VAR _StrokeLinecap =    IF(NOT ISBLANK(strokeLinecap),    \"stroke-linecap='\" &amp; strokeLinecap &amp; \"' \")\n        VAR _StrokeLinejoin =   IF(NOT ISBLANK(strokeLinejoin),   \"stroke-linejoin='\" &amp; strokeLinejoin &amp; \"' \")\n        VAR _StrokeMiterlimit = IF(NOT ISBLANK(strokeMiterlimit), \"stroke-miterlimit='\" &amp; strokeMiterlimit &amp; \"' \")\n        VAR _MarkerStart =      IF(NOT ISBLANK(markerStart),      \"marker-start='\" &amp; markerStart &amp; \"' \")\n        VAR _MarkerMid =        IF(NOT ISBLANK(markerMid),        \"marker-mid='\" &amp; markerMid &amp; \"' \")\n        VAR _MarkerEnd =        IF(NOT ISBLANK(markerEnd),        \"marker-end='\" &amp; markerEnd &amp; \"' \")\n\n        RETURN\n            _Stroke &amp;\n            _StrokeWidth &amp;\n            _StrokeOpacity &amp;\n            _StrokeDasharray &amp;\n            _StrokeDashoffset &amp;\n            _StrokeLinecap &amp;\n            _StrokeLinejoin &amp;\n            _StrokeMiterlimit &amp;\n            _MarkerStart &amp;\n            _MarkerMid &amp;\n            _MarkerEnd\n</code></pre>"},{"location":"attributes/Txt/","title":"Attr.Txt","text":"<p>Creates SVG attribute strings for text styling properties</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Attr.Txt( fontFamily, fontSize, fontWeight, fontStyle, textAnchor, baseline, textDecoration, letterSpacing, wordSpacing )\n</code></pre> Parameter Type Required Description fontFamily STRING Font family for text (e.g., \"Arial, sans-serif\") fontSize INT64 Font size in pixels fontWeight STRING Font weight (\"normal\", \"bold\", \"lighter\", \"100-900\") fontStyle STRING Font style (\"normal\", \"italic\", \"oblique\") textAnchor STRING Text anchor position (\"start\", \"middle\", \"end\") baseline STRING Dominant baseline alignment textDecoration STRING Text decoration (\"none\", \"underline\", \"overline\", \"line-through\") letterSpacing STRING Space between letters wordSpacing STRING Space between words <p>STRING An attribute string that can be used directly in SVG text elements</p> <pre><code>DaxLib.SVG.Attr.Txt(\"Arial, sans-serif\", 14, \"bold\", \"normal\", \"middle\", \"middle\", \"none\", \"\", \"\")\n// Returns \"font-family='Arial, sans-serif' font-size='14' font-weight='bold' font-style='normal' text-anchor='middle' dominant-baseline='middle' text-decoration='none'\"\n</code></pre> <pre><code>function 'DaxLib.SVG.Attr.Txt' = \n    (\n        fontFamily: STRING,\n        fontSize: INT64,\n        fontWeight: STRING,\n        fontStyle: STRING,\n        textAnchor: STRING,\n        baseline: STRING,\n        textDecoration: STRING,\n        letterSpacing: STRING,\n        wordSpacing: STRING\n    ) =&gt;\n\n        IF( NOT ISBLANK( fontFamily ),     \"font-family='\" &amp; fontFamily &amp; \"' \") &amp;\n        IF( NOT ISBLANK( fontSize ),       \"font-size='\" &amp; fontSize &amp; \"' \") &amp;\n        IF( NOT ISBLANK( fontWeight ),     \"font-weight='\" &amp; fontWeight &amp; \"' \") &amp;\n        IF( NOT ISBLANK( fontStyle ),      \"font-style='\" &amp; fontStyle &amp; \"' \") &amp;\n        IF( NOT ISBLANK( textAnchor ),     \"text-anchor='\" &amp; textAnchor &amp; \"' \") &amp;\n        IF( NOT ISBLANK( baseline ),       \"dominant-baseline='\" &amp; baseline &amp; \"' \") &amp;\n        IF( NOT ISBLANK( textDecoration ), \"text-decoration='\" &amp; textDecoration &amp; \"' \") &amp;\n        IF( NOT ISBLANK( letterSpacing ),  \"letter-spacing='\" &amp; letterSpacing &amp; \"' \") &amp;\n        IF( NOT ISBLANK( wordSpacing ),    \"word-spacing='\" &amp; wordSpacing &amp; \"' \")\n</code></pre>"},{"location":"colors/","title":"Colors","text":"<p>This library offers functions for working with colors in SVG visualizations. These functions provide capabilities for theming, and interpolation to create dynamic and accessible visualizations</p> <p>These are subset of functions from EvaluationContext.Colour</p> <p>Tip</p> <p>Color functions can be used with attribute functions like <code>DaxLib.SVG.Attr.Shapes()</code> to create dynamic coloring based on data values.</p> <pre><code>DaxLib.SVG.Attr.Shapes(\n    DaxLib.SVG.Color.Theme(\"Power BI\", 1),  // Dynamic theme color\n    BLANK(), \n    BLANK(), \n    BLANK(), \n    BLANK(), \n    BLANK(), \n    BLANK()\n)\n</code></pre>"},{"location":"colors/Hex.ToInt/","title":"Color.Hex.ToInt","text":"<p>Hex to Int conversion</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Color.Hex.ToInt(hex)\n</code></pre> Name Type Required Description hex STRING The hex value to convert i.e \"1A\" <p>NUMERIC Integer representation of the hexadecimal value</p> <pre><code>DaxLib.SVG.Color.Hex.ToInt(\"FF\")\n// Returns: 255\n</code></pre> <pre><code>function 'DaxLib.SVG.Color.Hex.ToInt' =\n    (\n        hex: STRING\n    ) =&gt;\n\n        VAR CleanHex = IF( LEFT( hex, 1 ) = \"#\", MID( hex, 2, LEN( hex ) - 1), hex )\n        VAR Result =\n            SUMX(\n                GENERATESERIES( 1, LEN( CleanHex ) ),\n                VAR Pos = [Value]\n                VAR c = MID( CleanHex, Pos, 1 )\n                VAR DigitValue = SWITCH( UPPER( c ), \"A\", 10, \"B\", 11, \"C\", 12, \"D\", 13, \"E\", 14, \"F\", 15, VALUE( c ) )\n                RETURN\n                    DigitValue * POWER( 16, LEN( hex ) - Pos )\n            )\n\n        RETURN Result\n</code></pre>"},{"location":"colors/Int.ToHex/","title":"Color.Int.ToHex","text":"<p>Int to Hex conversion</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Color.Int.ToHex( number, padTo )\n</code></pre> Name Type Required Description number INT64 The integer to convert padTo INT64 Minimum number of characters in result <p>STRING Hexadecimal representation of the integer</p> <pre><code>DaxLib.SVG.Color.Int.ToHex(255, 2)\n// Returns: \"FF\"\n</code></pre> <pre><code>function 'DaxLib.SVG.Color.Int.ToHex' =\n    (\n        number: INT64,\n        padTo: INT64\n    ) =&gt;\n\n        VAR MinPadding = IF( number = 0, 1, CEILING( LOG( number + 1, 16 ), 1 ) )\n        VAR ActualPadding = MAX( MinPadding, IF( ISBLANK( padTo ), MinPadding, padTo ) )\n        VAR BitTable = GENERATESERIES( 1, ActualPadding )\n        VAR Hex =\n            CONCATENATEX(\n                BitTable,\n                VAR c = MOD( TRUNC( number / POWER( 16, [Value] - 1 ) ), 16 )\n                RETURN\n                    SWITCH( c, 10, \"A\", 11, \"B\", 12, \"C\", 13, \"D\", 14, \"E\", 15, \"F\", c ),\n                \"\",\n                [Value],\n                DESC\n            )\n\n        RETURN Hex\n</code></pre>"},{"location":"colors/Interpolate/","title":"Color.Hex.Interpolate","text":"<p>Interpolate between two Hex colors by a given percentage</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Color.Hex.Interpolate( startHexColor, endHexColor, percentage )\n</code></pre> Name Type Required Description startHexColor STRING The starting Hex color (e.g., \"#FF0000\") endHexColor STRING The ending Hex color (e.g., \"#0000FF\") percentage DOUBLE The interpolation percentage (0.0 = startColor, 1.0 = endColor) <p>STRING Interpolated hex color code</p> <pre><code>DaxLib.SVG.Color.Hex.Interpolate(\"#FF0000\", \"#0000FF\", 0.5)\n// Returns: \"#800080\" (purple)\n</code></pre> <pre><code>function 'DaxLib.SVG.Color.Hex.Interpolate' =\n    (\n        startHexColor: STRING,\n        endHexColor: STRING,\n        percentage: DOUBLE\n    ) =&gt;\n\n        // Clamp percentage between 0 and 1\n        VAR _ClampedPercentage = MIN( MAX( percentage, 0 ), 1 )\n\n        // Clean Hex codes\n        VAR _StartHex = SUBSTITUTE( startHexColor, \"#\", \"\" )\n        VAR _EndHex =   SUBSTITUTE( endHexColor, \"#\", \"\" )\n\n        // Extract and convert RGB components using your existing Hex.ToInt function\n        VAR _StartR =   DaxLib.SVG.Color.Hex.ToInt( MID( _StartHex, 1, 2 ) )\n        VAR _StartG =   DaxLib.SVG.Color.Hex.ToInt( MID( _StartHex, 3, 2 ) )\n        VAR _StartB =   DaxLib.SVG.Color.Hex.ToInt( MID( _StartHex, 5, 2 ) )\n\n        VAR _EndR =     DaxLib.SVG.Color.Hex.ToInt( MID( _EndHex, 1, 2 ) )\n        VAR _EndG =     DaxLib.SVG.Color.Hex.ToInt( MID( _EndHex, 3, 2 ) )\n        VAR _EndB =     DaxLib.SVG.Color.Hex.ToInt( MID( _EndHex, 5, 2 ) )\n\n        // Interpolate RGB values\n        VAR _InterpolatedR = ROUND( _StartR + ( _EndR - _StartR ) * _ClampedPercentage, 0 )\n        VAR _InterpolatedG = ROUND( _StartG + ( _EndG - _StartG ) * _ClampedPercentage, 0 )\n        VAR _InterpolatedB = ROUND( _StartB + ( _EndB - _StartB ) * _ClampedPercentage, 0 )\n\n        VAR result =\n            DaxLib.SVG.Color.RGB.ToHex(\n                _InterpolatedR,\n                _InterpolatedG,\n                _InterpolatedB,\n                BLANK()  // No alpha\n            )\n\n        RETURN result\n</code></pre>"},{"location":"colors/PerformanceTheme/","title":"Color.PerformanceTheme","text":"<p>Returns a color for the specified performance level and theme</p> SyntaxAvailable ThemesExampleDefinition <pre><code>DaxLib.SVG.Color.PerformanceTheme( themeName, variant )\n</code></pre> Name Type Required Description themeName STRING Theme name variant STRING Performance level <p>STRING Hex color code representing the performance level</p> Performance Level Stoplight Colorblind Corporate Pastel Grayscale veryBad bad neutral good veryGood <pre><code>DaxLib.SVG.Color.PerformanceTheme(\"Stoplight\", \"good\")\n// Returns: \"#4CAF50\"\n</code></pre> <pre><code>function 'DaxLib.SVG.Color.PerformanceTheme' =\n    (\n        themeName: STRING,\n        variant: STRING\n    ) =&gt;\n\n        VAR Themes =\n            DATATABLE(\n            \"ThemeName\", STRING,\n            \"Variant\", STRING,\n            \"Color\", STRING,\n            {\n                // Stoplight - Classic red/yellow/green\n                {\"Stoplight\", \"veryBad\",  \"#D04848\"}, // Red\n                {\"Stoplight\", \"bad\",      \"#F07857\"}, // Orange-red\n                {\"Stoplight\", \"neutral\",  \"#FFBF49\"}, // Amber\n                {\"Stoplight\", \"good\",     \"#4CAF50\"}, // Green\n                {\"Stoplight\", \"veryGood\", \"#2E8B57\"}, // Sea green\n\n                // Colorblind-friendly\n                {\"Colorblind\", \"veryBad\",  \"#8F2D56\"}, // Wine red\n                {\"Colorblind\", \"bad\",      \"#D95980\"}, // Light raspberry\n                {\"Colorblind\", \"neutral\",  \"#FFC857\"}, // Yellow\n                {\"Colorblind\", \"good\",     \"#41B3A3\"}, // Teal\n                {\"Colorblind\", \"veryGood\", \"#1D4E89\"}, // Navy blue\n\n                // Corporate - Blue theme for business use\n                {\"Corporate\", \"veryBad\",  \"#BC2F4A\"}, // Red accent\n                {\"Corporate\", \"bad\",      \"#E36F6F\"}, // Light red\n                {\"Corporate\", \"neutral\",  \"#BDBDBD\"}, // Gray\n                {\"Corporate\", \"good\",     \"#6BB5D8\"}, // Light blue\n                {\"Corporate\", \"veryGood\", \"#114D85\"}, // Dark blue\n\n                // Pastel - Soft colors for gentler visualization\n                {\"Pastel\", \"veryBad\",  \"#F8AFA6\"}, // Soft red\n                {\"Pastel\", \"bad\",      \"#FAD48E\"}, // Soft orange\n                {\"Pastel\", \"neutral\",  \"#F5F5F5\"}, // Light gray\n                {\"Pastel\", \"good\",     \"#A6DCEF\"}, // Soft blue\n                {\"Pastel\", \"veryGood\", \"#A6E4D0\"}, // Soft green\n\n                // Grayscale - For black and white or muted presentations\n                {\"Grayscale\", \"veryBad\",  \"#4D4D4D\"}, // Dark gray\n                {\"Grayscale\", \"bad\",      \"#7D7D7D\"}, // Gray\n                {\"Grayscale\", \"neutral\",  \"#ADADAD\"}, // Medium gray\n                {\"Grayscale\", \"good\",     \"#D3D3D3\"}, // Light gray\n                {\"Grayscale\", \"veryGood\", \"#F9F9F9\"}  // Near white\n            }\n        )\n\n        VAR _variant =      IF( ISBLANK( variant ), \"neutral\", variant )\n        VAR _themeName =    IF( ISBLANK( themeName ), \"Stoplight\", themeName )\n\n        VAR SelectedColor =\n            MAXX(\n                FILTER( Themes, [Variant] = _variant &amp;&amp; [ThemeName] = _themeName),\n                [Color]\n            )\n</code></pre>"},{"location":"colors/RGB.ToHex/","title":"Color.RGB.ToHex","text":"<p>RGB to Hex conversion</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Color.RGB.ToHex( red, green, blue, alpha )\n</code></pre> Name Type Required Description red INT64 The red value (0-255) green INT64 The green value (0-255) blue INT64 The blue value (0-255) alpha DOUBLE The alpha value (0-1) <p>STRING Hex color code</p> <pre><code>DaxLib.SVG.Color.RGB.ToHex(255, 0, 0, BLANK())\n// Returns: \"#FF0000\" (red)\n</code></pre> <pre><code>function 'DaxLib.SVG.Color.RGB.ToHex' =\n    (\n        red: INT64,\n        green: INT64,\n        blue: INT64,\n        alpha: DOUBLE\n    ) =&gt;\n\n        \"#\" &amp;\n        DaxLib.SVG.Color.Int.ToHex( red, 2 ) &amp;\n        DaxLib.SVG.Color.Int.ToHex( green, 2 ) &amp;\n        DaxLib.SVG.Color.Int.ToHex( blue, 2 ) &amp;\n        IF( NOT ISBLANK( alpha ), DaxLib.SVG.Color.Int.ToHex( alpha * 255, 2 ) )\n</code></pre>"},{"location":"colors/Theme/","title":"Color.Theme","text":"<p>Select theme color, wrapping around to the start if variant exceeds available options</p> SyntaxAvailable ThemesExampleDefinition <pre><code>DaxLib.SVG.Color.Theme(themeName, variant)\n</code></pre> Name Type Required Description themeName STRING Theme name variant INT64 Variant index (1-N, wraps around if exceeds available variants) <p>STRING Hex color code</p> Variant Power BI Modern Corporate Ocean Breeze Sunset Vibes Forest Green Purple Rain Monochrome Vibrant Tech Earth Tones Pastel Dreams Midnight Blue 1 2 3 4 5 6 ... ... ... ... ... ... ... ... ... ... ... ... 41 <pre><code>DaxLib.SVG.Color.Theme(\"Power BI\", 1)\n// Returns: \"#118DFF\"\n</code></pre> <pre><code>function 'DaxLib.SVG.Color.Theme' =\n    (\n        themeName: STRING,\n        variant: INT64\n    ) =&gt;\n\n        VAR Themes =\n            DATATABLE(\n            \"ThemeName\", STRING,\n            \"Variant\", INTEGER,\n            \"Color\", STRING,\n            {\n                // Power BI Default\n                {\"Power BI\", 1, \"#118DFF\"},\n                {\"Power BI\", 2, \"#12239E\"},\n                {\"Power BI\", 3, \"#E66C37\"},\n                {\"Power BI\", 4, \"#6B007B\"},\n                {\"Power BI\", 5, \"#E044A7\"},\n                {\"Power BI\", 6, \"#744EC2\"},\n                {\"Power BI\", 7, \"#D9B300\"},\n                {\"Power BI\", 8, \"#D64550\"},\n                {\"Power BI\", 9, \"#197278\"},\n                {\"Power BI\", 10, \"#1AAB40\"},\n                {\"Power BI\", 11, \"#15C6F4\"},\n                {\"Power BI\", 12, \"#4092FF\"},\n                {\"Power BI\", 13, \"#FFA058\"},\n                {\"Power BI\", 14, \"#BE5DC9\"},\n                {\"Power BI\", 15, \"#F472D0\"},\n                {\"Power BI\", 16, \"#B5A1FF\"},\n                {\"Power BI\", 17, \"#C4A200\"},\n                {\"Power BI\", 18, \"#FF8080\"},\n                {\"Power BI\", 19, \"#00DBBC\"},\n                {\"Power BI\", 20, \"#5BD667\"},\n                {\"Power BI\", 21, \"#0091D5\"},\n                {\"Power BI\", 22, \"#4668C5\"},\n                {\"Power BI\", 23, \"#FF6300\"},\n                {\"Power BI\", 24, \"#99008A\"},\n                {\"Power BI\", 25, \"#EC008C\"},\n                {\"Power BI\", 26, \"#533285\"},\n                {\"Power BI\", 27, \"#99700A\"},\n                {\"Power BI\", 28, \"#FF4141\"},\n                {\"Power BI\", 29, \"#1F9A85\"},\n                {\"Power BI\", 30, \"#25891C\"},\n                {\"Power BI\", 31, \"#0057A2\"},\n                {\"Power BI\", 32, \"#002050\"},\n                {\"Power BI\", 33, \"#C94F0F\"},\n                {\"Power BI\", 34, \"#450F54\"},\n                {\"Power BI\", 35, \"#B60064\"},\n                {\"Power BI\", 36, \"#34124F\"},\n                {\"Power BI\", 37, \"#6A5A29\"},\n                {\"Power BI\", 38, \"#1AAB40\"},\n                {\"Power BI\", 39, \"#BA141A\"},\n                {\"Power BI\", 40, \"#0C3D37\"},\n                {\"Power BI\", 41, \"#0B511F\"},\n\n                // Modern Corporate - Professional blues and grays\n                {\"Modern Corporate\", 1, \"#2E3440\"},\n                {\"Modern Corporate\", 2, \"#3B4252\"},\n                {\"Modern Corporate\", 3, \"#434C5E\"},\n                {\"Modern Corporate\", 4, \"#4C566A\"},\n                {\"Modern Corporate\", 5, \"#5E81AC\"},\n                {\"Modern Corporate\", 6, \"#81A1C1\"},\n\n                // Ocean Breeze - Cool blues and teals\n                {\"Ocean Breeze\", 1, \"#0077BE\"},\n                {\"Ocean Breeze\", 2, \"#00A8CC\"},\n                {\"Ocean Breeze\", 3, \"#40E0D0\"},\n                {\"Ocean Breeze\", 4, \"#87CEEB\"},\n                {\"Ocean Breeze\", 5, \"#B0E0E6\"},\n                {\"Ocean Breeze\", 6, \"#E0F6FF\"},\n\n                // Sunset Vibes - Warm oranges and reds\n                {\"Sunset Vibes\", 1, \"#FF6B35\"},\n                {\"Sunset Vibes\", 2, \"#F7931E\"},\n                {\"Sunset Vibes\", 3, \"#FFD23F\"},\n                {\"Sunset Vibes\", 4, \"#EE4B2B\"},\n                {\"Sunset Vibes\", 5, \"#C04000\"},\n                {\"Sunset Vibes\", 6, \"#FFCBA4\"},\n\n                // Forest Green - Natural greens\n                {\"Forest Green\", 1, \"#355E3B\"},\n                {\"Forest Green\", 2, \"#228B22\"},\n                {\"Forest Green\", 3, \"#32CD32\"},\n                {\"Forest Green\", 4, \"#90EE90\"},\n                {\"Forest Green\", 5, \"#98FB98\"},\n                {\"Forest Green\", 6, \"#F0FFF0\"},\n\n                // Purple Rain - Rich purples\n                {\"Purple Rain\", 1, \"#301934\"},\n                {\"Purple Rain\", 2, \"#663399\"},\n                {\"Purple Rain\", 3, \"#9966CC\"},\n                {\"Purple Rain\", 4, \"#BA55D3\"},\n                {\"Purple Rain\", 5, \"#DDA0DD\"},\n                {\"Purple Rain\", 6, \"#E6E6FA\"},\n\n                // Monochrome - Sophisticated grays\n                {\"Monochrome\", 1, \"#1C1C1C\"},\n                {\"Monochrome\", 2, \"#333333\"},\n                {\"Monochrome\", 3, \"#666666\"},\n                {\"Monochrome\", 4, \"#999999\"},\n                {\"Monochrome\", 5, \"#CCCCCC\"},\n                {\"Monochrome\", 6, \"#F5F5F5\"},\n\n                // Vibrant Tech - Bold and energetic\n                {\"Vibrant Tech\", 1, \"#FF0080\"},\n                {\"Vibrant Tech\", 2, \"#00FFFF\"},\n                {\"Vibrant Tech\", 3, \"#FFFF00\"},\n                {\"Vibrant Tech\", 4, \"#FF8000\"},\n                {\"Vibrant Tech\", 5, \"#8000FF\"},\n                {\"Vibrant Tech\", 6, \"#00FF80\"},\n\n                // Earth Tones - Natural browns and beiges\n                {\"Earth Tones\", 1, \"#8B4513\"},\n                {\"Earth Tones\", 2, \"#A0522D\"},\n                {\"Earth Tones\", 3, \"#CD853F\"},\n                {\"Earth Tones\", 4, \"#DEB887\"},\n                {\"Earth Tones\", 5, \"#F4A460\"},\n                {\"Earth Tones\", 6, \"#FFF8DC\"},\n\n                // Pastel Dreams - Soft and gentle\n                {\"Pastel Dreams\", 1, \"#FFB3BA\"},\n                {\"Pastel Dreams\", 2, \"#FFDFBA\"},\n                {\"Pastel Dreams\", 3, \"#FFFFBA\"},\n                {\"Pastel Dreams\", 4, \"#BAFFC9\"},\n                {\"Pastel Dreams\", 5, \"#BAE1FF\"},\n                // {\"Pastel Dreams\", 6, \"#E1BAFF\"},\n\n                // Midnight Blue - Deep blues and navy\n                {\"Midnight Blue\", 1, \"#191970\"},\n                {\"Midnight Blue\", 2, \"#000080\"},\n                {\"Midnight Blue\", 3, \"#0000CD\"},\n                {\"Midnight Blue\", 4, \"#4169E1\"},\n                {\"Midnight Blue\", 5, \"#6495ED\"},\n                {\"Midnight Blue\", 6, \"#B0C4DE\"}\n            }\n        )\n\n        VAR ThemeColors = FILTER(Themes, [ThemeName] = themeName)\n        VAR MaxVariant = MAXX(ThemeColors, [Variant])\n        VAR AdjustedVariant = IF(\n            MaxVariant &gt; 0,\n            MOD( variant - 1, MaxVariant ) + 1,\n            variant\n        )\n        VAR SelectedColor =\n            MAXX(\n                FILTER( ThemeColors, [Variant] = AdjustedVariant),\n                [Color]\n            )\n\n        RETURN SelectedColor\n</code></pre>"},{"location":"compounds/","title":"Compounds","text":"<p>Compound functions combine multiple <code>DaxLib.SVG.Element.*</code> into higher-level reusable components and complete chart visualizations. Use these to simplify the creation of complex visuals in Power BI. You can specify x,y coordinates and width, height to easily combine <code>DaxLib.SVG.Compound.*</code> with other <code>DaxLib.SVG.Compound.*</code> or <code>DaxLib.SVG.Element.*</code>.</p> AreaBoxPlotHeatmapJitterLineViolinPill <p></p> <p></p> <p></p> <p> </p> <p></p> <p></p> <p>DaxLib</p>"},{"location":"compounds/Area/","title":"Compound.Area","text":"<p>Generates an Area compound SVG Visual</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Area( x, y, width, height, paddingX, paddingY, axisRef, measureRef, fillColor, fillOpacity, strokeColor )\n</code></pre> Parameter Type Required Description x INT64 The x position of the compound y INT64 The y position of the compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) axisRef ANYREF EXPR The column that the measure will be evaluated against measureRef NUMERIC EXPR The measure to evaluate fillColor STRING The color of the area fill (e.g., \"#01B8AA\") fillOpacity NUMERIC The opacity of the fill (0-1), defaults to 0.3 strokeColor STRING The color of the stroke line <p>STRING An SVG area chart element that visualizes the measure across the specified axis with filled area</p> <pre><code>    DaxLib.SVG.SVG(\n        500,\n        100,\n        BLANK(),\n        DaxLib.SVG.Compound.Area(\n            0,              // x\n            0,              // y\n            500,            // width\n            100,            // height\n            0.05,           // paddingX\n            0.02,           // paddingY\n            Dates[Date],    // xAxis\n            [Total Cost],   // measureVal\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),              // fillColour\n            0.2,            // fillOpacity\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            )               // strokeColour\n        ),\n        BLANK()\n    )\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Area' =\n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        axisRef: ANYREF EXPR,\n        measureRef: NUMERIC EXPR,\n        fillColor: STRING,\n        fillOpacity: NUMERIC,\n        strokeColor: STRING\n    ) =&gt;\n\n        // Apply padding to dimensions\n        VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n        VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n        VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n        VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n        // Check if Axis is numeric\n        VAR axisSample =    MAX( axisRef )\n        VAR axisIsNumeric = ISNUMERIC( axisSample ) || ISDATETIME( axisSample )\n\n        // For totals\n        VAR _Data = \n            ADDCOLUMNS(\n                FILTER(\n                    VALUES( axisRef ),\n                    NOT ISBLANK( measureRef )\n                ),\n                \"@AxisIndex\",   \n                    IF(\n                        axisIsNumeric,\n                        axisRef,\n                        RANK( DENSE, CALCULATETABLE( VALUES( axisRef ), ALLSELECTED() ) )\n                    ),\n                \"@Value\", measureRef\n            )\n\n        VAR _XMin =     MINX( _Data, [@AxisIndex] )\n        VAR _XMax =     MAXX( _Data, [@AxisIndex] )\n        VAR _RawYMin =  MINX( _Data, [@Value] )\n        VAR _YMin =     IF( _RawYMin &gt; 0, 0, _RawYMin )\n        VAR _YMax =     MAXX( _Data, [@Value] )\n\n        // Calculate baseline Y position (for zero line or bottom)\n        VAR _BaselineY = DaxLib.SVG.Scale.Normalize( _YMin, _YMin, _YMax, _Y + _Height, _Y )\n\n        // Get first and last X positions\n        VAR _FirstX = \n            MINX(\n                FILTER( _Data, NOT ISBLANK( [@Value] ) ),\n                DaxLib.SVG.Scale.Normalize( [@AxisIndex], _XMin, _XMax, _X, _X + _Width )\n            )\n\n        VAR _LastX = \n            MAXX(\n                FILTER( _Data, NOT ISBLANK( [@Value] ) ),\n                DaxLib.SVG.Scale.Normalize( [@AxisIndex], _XMin, _XMax, _X, _X + _Width )\n            )\n\n        // Generate points for the area polygon\n        // Start at baseline (bottom left), go up the data line, then back down to baseline\n        VAR _PolygonPoints = \n            // Start at first X position at baseline\n            _FirstX &amp; \",\" &amp; _BaselineY\n            // Add all the data points (the top line)\n            &amp; \" \" &amp; \n            CONCATENATEX(\n                _Data,\n                IF( \n                    NOT ISBLANK( [@Value] ), \n                    COMBINEVALUES( \n                        \",\", \n                        DaxLib.SVG.Scale.Normalize( [@AxisIndex], _XMin, _XMax, _X, _X + _Width ), \n                        DaxLib.SVG.Scale.Normalize( [@Value], _YMin, _YMax, _Y + _Height, _Y )\n                    )\n                ),\n                \" \",\n                [@AxisIndex],\n                ASC\n            )\n            // End at last X position at baseline\n            &amp; \" \" &amp; _LastX &amp; \",\" &amp; _BaselineY\n\n        // Generate points for just the top line (for optional stroke)\n        VAR _TopPoints = \n            CONCATENATEX(\n                _Data,\n                IF( \n                    NOT ISBLANK( [@Value] ), \n                    COMBINEVALUES( \n                        \",\", \n                        DaxLib.SVG.Scale.Normalize( [@AxisIndex], _XMin, _XMax, _X, _X + _Width ), \n                        DaxLib.SVG.Scale.Normalize( [@Value], _YMin, _YMax, _Y + _Height, _Y )\n                    )\n                ),\n                \" \",\n                [@AxisIndex],\n                ASC\n            )\n\n        // Area Element (using polygon for filled area)\n        VAR _AreaElement =\n            DaxLib.SVG.Element.Polygon(\n                _PolygonPoints,     // points\n                DaxLib.SVG.Attr.Shapes(\n                    fillColor,      // fill\n                    IF( NOT ISBLANK( fillOpacity ), fillOpacity, 0.3 ), // fillOpacity\n                    BLANK(),        // fillRule\n                    \"none\",         // stroke\n                    0,              // strokeWidth\n                    BLANK(),        // strokeOpacity\n                    BLANK()         // opacity\n                ),\n                BLANK()             // transforms\n            )\n\n        // stroke line on top of the area\n        VAR _StrokeElement = \n            DaxLib.SVG.Element.Polyline(\n                _TopPoints,         // points\n                DaxLib.SVG.Attr.Shapes(\n                    \"none\",         // fill\n                    BLANK(),        // fillOpacity\n                    BLANK(),        // fillRule\n                    strokeColor,    // stroke\n                    1,              // strokeWidth\n                    BLANK(),        // strokeOpacity\n                    BLANK()         // opacity\n                ),\n                BLANK()             // transforms\n            )\n\n        // Circle if only one point\n        VAR _SinglePointElement =\n            DaxLib.SVG.Element.Circle(\n                    DaxLib.SVG.Scale.Normalize( MAXX( _Data, [@AxisIndex] ), _XMin, _XMax, _X, _X + _Width ), // cx\n                    DaxLib.SVG.Scale.Normalize( MAXX( _Data, [@Value] ), _YMin, _YMax, _Y + _Height, _Y ), // cy\n                    2,                  // r\n                    DaxLib.SVG.Attr.Shapes(\n                        fillColor,     // fill\n                        BLANK(),        // fillOpacity\n                        BLANK(),        // fillRule\n                        BLANK(),        // stroke\n                        BLANK(),        // strokeWidth\n                        BLANK(),        // strokeOpacity\n                        BLANK()         // opacity\n                    ),\n                    BLANK()             // transforms\n                )\n\n        // Combine elements\n        VAR _CombinedElements = \n            IF(\n                COUNTROWS( _Data ) = 1,\n                _SinglePointElement,\n                _AreaElement &amp;\n                _StrokeElement\n            )\n\n        RETURN\n\n            IF( NOT ISEMPTY( _Data ), _CombinedElements )\n</code></pre>"},{"location":"compounds/Boxplot/","title":"Compound.Boxplot","text":"<p>Generates a Box Plot compound SVG Visual showing statistical distribution</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Boxplot( x, y, width, height, paddingX, paddingY, axisRef, measureRef, fillColor, strokeColor, showOutliers )\n</code></pre> Parameter Type Required Description x INT64 The x position of the compound y INT64 The y position of the compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) axisRef ANYREF EXPR The column that the measure will be evaluated against measureRef NUMERIC EXPR The measure to evaluate fillColor STRING Color for the box fill strokeColor STRING Color for lines, whiskers, and median showOutliers BOOLEAN Whether to show outlier points beyond whiskers <p>STRING An SVG box plot showing statistical distribution including quartiles, median, whiskers, and optionally outliers</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    BLANK(),\n    DaxLib.SVG.Compound.Boxplot(\n        0,                  // x\n        0,                  // y\n        500,                // width\n        100,                // height\n        0.05,               // paddingX\n        0.02,               // paddingY\n        Dates[Date],        // axisRef\n        [Total Cost],       // measureVal\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        ),                  // fillColour\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        ),                  // strokeColour\n        TRUE                // showOutliers\n    ),\n    BLANK()\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Boxplot' =\n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        axisRef: ANYREF EXPR,\n        measureRef: NUMERIC EXPR,\n        fillColor: STRING,\n        strokeColor: STRING,\n        showOutliers: BOOLEAN\n    ) =&gt;\n\n        // Apply padding to dimensions\n        VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n        VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n        VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n        VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n        // Check if Axis is numeric\n        VAR axisSample =    MAX( axisRef )\n        VAR axisIsNumeric = ISNUMERIC( axisSample ) || ISDATETIME( axisSample )\n\n        // For totals\n        VAR _Data = \n            ADDCOLUMNS(\n                FILTER(\n                    VALUES( axisRef ),\n                    NOT ISBLANK( measureRef )\n                ),\n                \"@AxisIndex\",   \n                    IF(\n                        axisIsNumeric,\n                        axisRef,\n                        RANK( DENSE, CALCULATETABLE( VALUES( axisRef ), ALLSELECTED() ) )\n                    ),\n                \"@Value\", measureRef\n            )\n\n        VAR _XMin =             MINX( _Data, [@Value] )\n        VAR _XMax =             MAXX( _Data, [@Value] )\n\n        VAR _Count =            COUNTROWS( _Data )\n        VAR _Min =              MINX( _Data, [@Value] )\n        VAR _Max =              MAXX( _Data, [@Value] )\n\n        // Calculate quartiles using standard definitions\n        VAR _Q1 =               PERCENTILEX.INC( _Data, [@Value], 0.25 )\n        VAR _Median =           PERCENTILEX.INC( _Data, [@Value], 0.5 )\n        VAR _Q3 =               PERCENTILEX.INC( _Data, [@Value], 0.75 )\n\n        // Calculate IQR and whisker boundaries (1.5 * IQR rule)\n        VAR _IQR =              _Q3 - _Q1\n        VAR _LowerWhisker =     MAX( _Min, _Q1 - 1.5 * _IQR )\n        VAR _UpperWhisker =     MIN( _Max, _Q3 + 1.5 * _IQR )\n\n        // Scale statistical values to SVG coordinates\n        VAR _Q1X =              DaxLib.SVG.Scale.Normalize( _Q1, _XMin, _XMax, _X, _X + _Width )\n        VAR _MedianX =          DaxLib.SVG.Scale.Normalize( _Median, _XMin, _XMax, _X, _X + _Width )\n        VAR _Q3X =              DaxLib.SVG.Scale.Normalize( _Q3, _XMin, _XMax, _X, _X + _Width )\n        VAR _LowerWhiskerX =    DaxLib.SVG.Scale.Normalize( _LowerWhisker, _XMin, _XMax, _X, _X + _Width )\n        VAR _UpperWhiskerX =    DaxLib.SVG.Scale.Normalize( _UpperWhisker, _XMin, _XMax, _X, _X + _Width )\n\n        // Box dimensions - centered vertically with padding\n        VAR _BoxHeight =        _Height * 0.6\n        VAR _BoxY =             _Y + _Height * 0.2\n        VAR _CenterY =          _Y + _Height * 0.5\n\n        // Create outlier points beyond whiskers if enabled\n        VAR _Outliers = \n            IF(\n                showOutliers,\n                CONCATENATEX(\n                    FILTER(\n                        _Data,\n                        [@Value] &lt; _LowerWhisker || [@Value] &gt; _UpperWhisker\n                    ),\n                    DaxLib.SVG.Element.Circle(\n                        DaxLib.SVG.Scale.Normalize( [@Value], _XMin, _XMax, _X, _X + _Width ), // cx\n                        _CenterY,           // cy\n                        2,                  // radius\n                        DaxLib.SVG.Attr.Shapes(\n                            strokeColor,    // fill\n                            BLANK(),        // fillOpacity\n                            BLANK(),        // fillRule\n                            BLANK(),        // stroke\n                            BLANK(),        // strokeWidth\n                            BLANK(),        // strokeOpacity\n                            BLANK()         // opacity\n                        ),\n                        BLANK()             // transforms\n                    ),\n                    \"\"\n                )\n            )\n\n        // Lower whisker line from whisker to Q1 (horizontal)\n        VAR _LowerWhiskerLine = \n            DaxLib.SVG.Element.Line(\n                _LowerWhiskerX,         // x1\n                _CenterY,               // y1\n                _Q1X,                   // x2\n                _CenterY,               // y2\n                DaxLib.SVG.Attr.Shapes(\n                    BLANK(),            // fill\n                    BLANK(),            // fillOpacity\n                    BLANK(),            // fillRule\n                    strokeColor,        // stroke\n                    1,                  // strokeWidth\n                    BLANK(),            // strokeOpacity\n                    BLANK()             // opacity\n                ),\n                BLANK()                 // transforms\n            )\n\n        // Upper whisker line from Q3 to whisker (horizontal)\n        VAR _UpperWhiskerLine = \n            DaxLib.SVG.Element.Line(\n                _Q3X,                   // x1\n                _CenterY,               // y1\n                _UpperWhiskerX,         // x2\n                _CenterY,               // y2\n                DaxLib.SVG.Attr.Shapes(\n                    BLANK(),            // fill\n                    BLANK(),            // fillOpacity\n                    BLANK(),            // fillRule\n                    strokeColor,        // stroke\n                    1,                  // strokeWidth\n                    BLANK(),            // strokeOpacity\n                    BLANK()             // opacity\n                ),\n                BLANK()                 // transforms\n            )\n\n        // Lower whisker cap (vertical line)\n        VAR _LowerCap = \n            DaxLib.SVG.Element.Line(\n                _LowerWhiskerX,         // x1\n                _BoxY,                  // y1\n                _LowerWhiskerX,         // x2\n                _BoxY + _BoxHeight,     // y2\n                DaxLib.SVG.Attr.Shapes(\n                    BLANK(),            // fill\n                    BLANK(),            // fillOpacity\n                    BLANK(),            // fillRule\n                    strokeColor,        // stroke\n                    1,                  // strokeWidth\n                    BLANK(),            // strokeOpacity\n                    BLANK()             // opacity\n                ),\n                BLANK()                 // transforms\n            )\n\n        // Upper whisker cap (vertical line)\n        VAR _UpperCap = \n            DaxLib.SVG.Element.Line(\n                _UpperWhiskerX,         // x1\n                _BoxY,                  // y1\n                _UpperWhiskerX,         // x2\n                _BoxY + _BoxHeight,     // y2\n                DaxLib.SVG.Attr.Shapes(\n                    BLANK(),            // fill\n                    BLANK(),            // fillOpacity\n                    BLANK(),            // fillRule\n                    strokeColor,        // stroke\n                    1,                  // strokeWidth\n                    BLANK(),            // strokeOpacity\n                    BLANK()             // opacity\n                ),\n                BLANK()                 // transforms\n            )\n\n        // Main box (Q1 to Q3) - horizontal\n        VAR _Box = \n            DaxLib.SVG.Element.Rect(\n                _Q1X,                   // x (left of box)\n                _BoxY,                  // y\n                _Q3X - _Q1X,            // width (Q3 - Q1)\n                _BoxHeight,             // height\n                2,                      // rx\n                2,                      // ry\n                DaxLib.SVG.Attr.Shapes(\n                    fillColor,          // fill\n                    0.5,                // fillOpacity\n                    BLANK(),            // fillRule\n                    strokeColor,        // stroke\n                    1,                  // strokeWidth\n                    BLANK(),            // strokeOpacity\n                    BLANK()             // opacity\n                ),\n                BLANK()                 // transforms\n            )\n\n        // Median line (vertical)\n        VAR _MedianLine = \n            DaxLib.SVG.Element.Line(\n                _MedianX,               // x1\n                _BoxY,                  // y1\n                _MedianX,               // x2\n                _BoxY + _BoxHeight,     // y2\n                DaxLib.SVG.Attr.Shapes(\n                    BLANK(),            // fill\n                    BLANK(),            // fillOpacity\n                    BLANK(),            // fillRule\n                    strokeColor,        // stroke\n                    2,                  // strokeWidth (thicker for median)\n                    BLANK(),            // strokeOpacity\n                    BLANK()             // opacity\n                ),\n                BLANK()                 // transforms\n            )\n\n        // Combined elements\n        VAR _CombinedElements = \n            _LowerWhiskerLine &amp;\n            _UpperWhiskerLine &amp;\n            _LowerCap &amp;\n            _UpperCap &amp;\n            _Box &amp;\n            _MedianLine &amp;\n            _Outliers\n\n        RETURN\n\n            IF( NOT ISEMPTY( _Data ), _CombinedElements )\n</code></pre>"},{"location":"compounds/Heatmap/","title":"Compound.Heatmap","text":"<p>Generates a KDE-based Heatmap compound SVG Visual using Kernel Density Estimation (KDE) for smooth color gradients</p> Kernel Density Estimation (KDE) <p>KDE is a statistical method that estimates the probability density function of your data by placing a \"kernel\" (typically a normal distribution) at each data point. The heatmap visualizes data density across the range, creating smooth gradients that reveal patterns and concentrations in your dataset.</p> <p>Key Parameters:</p> <ul> <li> <p>Samples: Controls the resolution of the density calculation (higher = smoother, but slower performance)</p> </li> <li> <p>Bandwidth: Controls the smoothing level - smaller values create sharper peaks around data points, larger values create broader, smoother distributions</p> </li> </ul> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Heatmap( x, y, width, height, paddingX, paddingY, axisRef, measureRef, samples, bandwidth, color )\n</code></pre> Parameter Type Required Description x INT64 The x position of the compound y INT64 The y position of the compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) axisRef ANYREF EXPR The column that the measure will be evaluated against measureRef NUMERIC EXPR The measure to evaluate samples INT64 Number of density calculation points bandwidth NUMERIC Kernel bandwidth for smoothing (default auto-calculated) color STRING The Hex color for high density areas (e.g., \"#01B8AA\") <p>STRING An SVG heatmap with smooth color gradients representing data density using kernel density estimation</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    BLANK(),\n    DaxLib.SVG.Compound.Heatmap(\n        0,                  // x\n        0,                  // y\n        500,                // width\n        100,                // height\n        0.05,               // paddingX\n        0.02,               // paddingY\n        Dates[Date],        // axisRef\n        [Total Cost],       // measureVal\n        MAX( Samples[Samples] ), // samples\n        MAX( Bandwidth[Bandwidth] ), // bandwidth\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        )                   // Colour\n    ),\n    BLANK()\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Heatmap' =\n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        axisRef: ANYREF EXPR,\n        measureRef: NUMERIC EXPR,\n        samples: INT64,\n        bandwidth: NUMERIC,\n        color: STRING\n    ) =&gt;\n\n        // Apply padding to dimensions\n        VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n        VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n        VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n        VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n        // Check if Axis is numeric\n        VAR axisSample =    MAX( axisRef )\n        VAR axisIsNumeric = ISNUMERIC( axisSample ) || ISDATETIME( axisSample )\n\n        // For totals\n        VAR _Data = \n            ADDCOLUMNS(\n                FILTER(\n                    VALUES( axisRef ),\n                    NOT ISBLANK( measureRef )\n                ),\n                \"@AxisIndex\",   \n                    IF(\n                        axisIsNumeric,\n                        axisRef,\n                        RANK( DENSE, CALCULATETABLE( VALUES( axisRef ), ALLSELECTED() ) )\n                    ),\n                \"@Value\", measureRef\n            )\n\n        VAR _NumValues =        COUNTROWS( _Data )\n        VAR _Min =              MINX( _Data, [@Value] )\n        VAR _Max =              MAXX( _Data, [@Value] )\n        VAR _Range =            _Max - _Min\n        VAR _RangePerSample =   _Range / samples\n\n        // Calculate Kernel Density Estimation using Normal distribution\n        VAR _KDE = \n            ADDCOLUMNS(\n                GENERATESERIES( 0, samples, 1 ),\n                \"@InputX\", _Min + _RangePerSample * [Value],\n                \"@KDE\", \n                    ( 1 / _NumValues ) * \n                    SUMX(\n                        _Data, \n                        NORM.DIST( \n                            _Min + _RangePerSample * [Value], \n                            [@Value], \n                            bandwidth, \n                            FALSE() \n                        ) \n                    )\n            )\n\n        VAR _MaxKDE =       MAXX( _KDE, [@KDE] )\n\n        // Create gradient stops from KDE points\n        VAR _GradientStops = \n            CONCATENATEX(\n                _KDE,\n                VAR _Position = DaxLib.SVG.Scale.Normalize( [@InputX], _Min, _Max, 0, 100 )\n                VAR _Intensity = IF( _MaxKDE &gt; 0, [@KDE] / _MaxKDE, 0 )\n                VAR _StopColor = \n                    DaxLib.SVG.Color.Hex.Interpolate(\n                        \"#FFFFFF\",\n                        color,\n                        _Intensity\n                    )\n                RETURN\n                    \"&lt;stop offset='\" &amp; _Position &amp; \"%' stop-color='\" &amp; _StopColor &amp; \"' /&gt;\",\n                \"\",\n                [Value],\n                ASC\n            )\n\n        // Create linear gradient definition\n        VAR _GradientDef = \n            \"&lt;defs&gt;\" &amp;\n                \"&lt;linearGradient id='kde-gradient' x1='0%' y1='0%' x2='100%' y2='0%'&gt;\" &amp;\n                    _GradientStops &amp;\n                \"&lt;/linearGradient&gt;\" &amp;\n            \"&lt;/defs&gt;\"\n\n        // Create rectangle with gradient fill\n        VAR _HeatmapRect = \n            DaxLib.SVG.Element.Rect(\n                0,                          // x\n                0,                          // y\n                width,                      // width\n                height,                     // height\n                0,                          // rx\n                0,                          // ry\n                DaxLib.SVG.Attr.Shapes(\n                    \"url(#kde-gradient)\",   // fill\n                    BLANK(),                // fillOpacity\n                    BLANK(),                // fillRule\n                    BLANK(),                // stroke\n                    BLANK(),                // strokeWidth\n                    BLANK(),                // strokeOpacity\n                    BLANK()                 // opacity\n                ),\n                BLANK()                     // transforms\n            )\n\n        // Combined elements\n        VAR _CombinedElements =\n            _GradientDef &amp; \n            _HeatmapRect\n\n        RETURN\n\n            IF( NOT ISEMPTY( _Data ), _CombinedElements )\n</code></pre>"},{"location":"compounds/Jitter/","title":"Compound.Jitter","text":"<p>Generates a Jitter Plot compound SVG Visual showing values as points with x-position based on value and y-position jittered around center</p> <p> </p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Jitter( x, y, width, height, paddingX, paddingY, axisRef, measureRef, pointColor, jitterAmount )\n</code></pre> Parameter Type Required Description x INT64 The x position of the compound y INT64 The y position of the compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) axisRef ANYREF EXPR The column that the measure will be evaluated against measureRef NUMERIC EXPR The measure to evaluate pointColor STRING The Hex color of the points (e.g., \"#01B8AA\") jitterAmount DOUBLE The amount of y-axis jitter as a percentage of height (0.0-1.0, defaults to 0.3) <p>STRING An SVG jitter plot showing data points with horizontal positioning based on values and vertical jittering for visibility</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    BLANK(),\n    DaxLib.SVG.Compound.Jitter(\n        0,                  // x\n        0,                  // y\n        500,                // width\n        100,                // height\n        0.05,               // paddingX\n        0.02,               // paddingY\n        Dates[Date],        // xAxis\n        [Total Cost],       // measureRef\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        )                   // pointColour\n        0.5                 // jitterAmount\n    ),\n    BLANK()\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Jitter' = \n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        axisRef: ANYREF EXPR,\n        measureRef: NUMERIC EXPR,\n        pointColor: STRING,\n        jitterAmount: DOUBLE\n    ) =&gt;\n\n        // Apply padding to dimensions\n        VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n        VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n        VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n        VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n        // Check if Axis is numeric\n        VAR axisSample =    MAX( axisRef )\n        VAR axisIsNumeric = ISNUMERIC( axisSample ) || ISDATETIME( axisSample )\n\n        // For totals\n        VAR _Data = \n            ADDCOLUMNS(\n                FILTER(\n                    VALUES( axisRef ),\n                    NOT ISBLANK( measureRef )\n                ),\n                \"@AxisIndex\",   \n                    IF(\n                        axisIsNumeric,\n                        axisRef,\n                        RANK( DENSE, CALCULATETABLE( VALUES( axisRef ), ALLSELECTED() ) )\n                    ),\n                \"@Value\", measureRef\n            )\n\n        VAR _RawXMin =  MINX( _Data, [@Value] )\n        VAR _XMin =     IF( _RawXMin &gt; 0, 0, _RawXMin )\n        VAR _XMax =     MAXX( _Data, [@Value] )\n\n        // Points\n        VAR _CenterY =      _Y + _Height * 0.5\n        VAR _JitterRange =  _Height * IF( ISBLANK( jitterAmount ), 0.3, jitterAmount )\n        VAR _CircleElements = \n            CONCATENATEX(\n                _Data,\n                IF( \n                    NOT ISBLANK( [@Value] ),\n                    VAR _Seed =         ABS( [@Value] * 12345 ) + ABS( [@AxisIndex] * 67890 ) + ABS( LEN( FORMAT( [@Value], \"0.000000\" ) ) * 9876 )\n                    VAR _PseudoRandom = MOD( _Seed, 10000 ) / 10000\n                    VAR _JitterY =      _CenterY + ( _PseudoRandom - 0.5 ) * _JitterRange\n                    VAR _ClampedY =     MAX( _Y, MIN( _Y + _Height, _JitterY ) )\n                    RETURN\n                        DaxLib.SVG.Element.Circle(\n                            DaxLib.SVG.Scale.Normalize( [@Value], _XMin, _XMax, _X, _X + _Width ), // cx\n                            _ClampedY,          // cy\n                            2,                  // r\n                            DaxLib.SVG.Attr.Shapes(\n                                pointColor,     // fill\n                                0.5,            // fillOpacity\n                                BLANK(),        // fillRule\n                                pointColor,     // stroke\n                                1,              // strokeWidth\n                                0.9,            // strokeOpacity\n                                BLANK()         // opacity\n                            ),\n                            BLANK()             // transforms\n                        )\n                ),\n                \" \",\n                [@AxisIndex],\n                ASC\n            )\n\n        RETURN\n\n            IF( NOT ISEMPTY( _Data ), _CircleElements )\n</code></pre>"},{"location":"compounds/Line/","title":"Compound.Line","text":"<p>Generates a Line compound SVG Visual</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Line( x, y, width, height, paddingX, paddingY, axisRef, measureRef, lineColor )\n</code></pre> Parameter Type Required Description x INT64 The x position of the compound y INT64 The y position of the compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) axisRef ANYREF EXPR The column that the measure will be evaluated against measureRef NUMERIC EXPR The measure to evaluate lineColor STRING The Hex color of the line (e.g., \"#01B8AA\") <p>STRING An SVG line chart element that visualizes the measure across the specified axis.</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    BLANK(),\n    DaxLib.SVG.Compound.Line(\n        0,                  // x\n        0,                  // y\n        500,                // width\n        100,                // height\n        0.05,               // paddingX\n        0.04,               // paddingY\n        Dates[Date],        // xAxis\n        [Total Cost],       // measureVal\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        )                   // lineColour\n    ),\n    BLANK()\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Line' =\n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        axisRef: ANYREF EXPR,\n        measureRef: NUMERIC EXPR,\n        lineColor: STRING\n    ) =&gt;\n\n        // Apply padding to dimensions\n        VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n        VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n        VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n        VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n        // Check if Axis is numeric\n        VAR axisSample =    MAX( axisRef )\n        VAR axisIsNumeric = ISNUMERIC( axisSample ) || ISDATETIME( axisSample )\n\n        // For totals\n        VAR _Data = \n            ADDCOLUMNS(\n                FILTER(\n                    VALUES( axisRef ),\n                    NOT ISBLANK( measureRef )\n                ),\n                \"@AxisIndex\",   \n                    IF(\n                        axisIsNumeric,\n                        axisRef,\n                        RANK( DENSE, CALCULATETABLE( VALUES( axisRef ), ALLSELECTED() ) )\n                    ),\n                \"@Value\", measureRef\n            )\n\n        // Define axis scales       \n        VAR _XMin =     MINX( _Data, [@AxisIndex] )\n        VAR _XMax =     MAXX( _Data, [@AxisIndex] )\n        VAR _RawYMin =  MINX( _Data, [@Value] )\n        VAR _YMin =     IF( _RawYMin &gt; 0, 0, _RawYMin )\n        VAR _YMax =     MAXX( _Data, [@Value] )\n\n        //Points\n        VAR _Points = \n            CONCATENATEX(\n                _Data,\n                IF( \n                    NOT ISBLANK( [@Value] ), \n                    COMBINEVALUES( \n                        \",\", \n                        DaxLib.SVG.Scale.Normalize( [@AxisIndex], _XMin, _XMax, _X, _X + _Width ), \n                        DaxLib.SVG.Scale.Normalize( [@Value], _YMin, _YMax, _Y + _Height, _Y )\n                    )\n                ),\n                \" \",\n                [@AxisIndex],\n                ASC\n            )\n\n        // Line Element\n        VAR _LineElement =\n            DaxLib.SVG.Element.Polyline(\n                _Points,        // points\n                DaxLib.SVG.Attr.Shapes(\n                    \"none\",     // fill\n                    BLANK(),    // fillOpacity\n                    BLANK(),    // fillRule\n                    IF( NOT ISBLANK( lineColor ), lineColor, \"#01B8AA\" ), // stroke\n                    1,          // stroke\n                    BLANK(),    // strokeOpacity\n                    BLANK()     // opacity\n                ),\n                BLANK()         // transforms\n            )\n\n        // Single Point Element\n        VAR _SinglePointElement =\n            DaxLib.SVG.Element.Circle(\n                DaxLib.SVG.Scale.Normalize( MAXX( _Data, [@AxisIndex] ), _XMin, _XMax, _X, _X + _Width ), // cx\n                DaxLib.SVG.Scale.Normalize( MAXX( _Data, [@Value] ), _YMin, _YMax, _Y + _Height, _Y ), // cy\n                2,              // r\n                DaxLib.SVG.Attr.Shapes(\n                    lineColor,  // fill\n                    BLANK(),    // fillOpacity\n                    BLANK(),    // fillRule\n                    BLANK(),    // stroke\n                    BLANK(),    // strokeWidth\n                    BLANK(),    // strokeOpacity\n                    BLANK()     // opacity\n                ),\n                BLANK()         // transforms\n            )\n\n        // Combined elements\n        VAR _CombinedElement = \n            IF(\n                COUNTROWS( _Data ) = 1,\n                _SinglePointElement,\n                _LineElement\n            )\n\n        RETURN\n\n            IF( NOT ISEMPTY( _Data ), _CombinedElement )\n</code></pre>"},{"location":"compounds/Pill/","title":"Compound.Pill","text":"<p>Generates a pill SVG compound (rounded rectangle with text centered inside)</p> <p>DaxLib</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Pill( x, y, width, height, paddingX, paddingY, txt, color )\n</code></pre> Parameter Type Required Description x INT64 The x position of compound y INT64 The y position of compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) txt STRING The text to display color STRING The Hex color of the pill (e.g., \"#01B8AA80\") <p>STRING A pill-shaped SVG element with rounded corners and centered text</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    BLANK(),\n    DaxLib.SVG.Compound.Pill(\n        0,                  // x\n        0,                  // y\n        500,                // width\n        100,                // height\n        0.05,               // paddingX\n        0.02,               // paddingY\n        MAX( Products[Brand] ), // txt\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        )                   // colour\n    ),\n    BLANK()\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Pill' = \n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        txt: STRING,\n        color: STRING\n    ) =&gt;\n\n    // Apply padding to dimensions\n    VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n    VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n    VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n    VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n    VAR _Pill = \n        DaxLib.SVG.Element.Rect(\n            1,                  // x\n            1,                  // y\n            _Width * 0.98,      // width\n            _Height * 0.92,     // height\n            10,                 // rx\n            10,                 // ry\n            DaxLib.SVG.Attr.Shapes(\n                color,          // fill\n                0.2,            // fillOpacity\n                BLANK(),        // fillRule\n                color,          // stroke\n                1,              // strokeWidth\n                BLANK(),        // strokeOpacity\n                BLANK()         // opacity\n            ),                  // attributes\n            BLANK()             // transforms\n        )\n\n    VAR _TextElement = \n        DaxLib.SVG.Element.Txt(\n            _Width * 0.50,      // x\n            _Height * 0.58,     // y\n            txt,                // txt\n            0,                  // dx\n            0,                  // dy\n            DaxLib.SVG.Attr.Shapes(\n                color,          // fill\n                BLANK(),        // fillOpacity\n                BLANK(),        // fillRule\n                BLANK(),        // stroke\n                BLANK(),        // strokeWidth\n                BLANK(),        // strokeOpacity\n                BLANK()         // opacity\n            ) &amp;\n            DaxLib.SVG.Attr.Txt(\n                \"Segoe UI\",     // fontFamily\n                12,             // fontSize\n                BLANK(),        // fontWeight\n                BLANK(),        // fontStyle\n                \"middle\",       // textAnchor\n                \"middle\",       // baseline\n                BLANK(),        // textDecoration\n                BLANK(),        // letterSpacing\n                BLANK()         // wordSpacing\n            ),                  // attributes\n            BLANK()             // transforms\n        )\n\n    VAR _CombinedElements = \n        _Pill &amp; \n        _TextElement\n\n    RETURN\n        IF( NOT ISBLANK( txt ), _CombinedElements )\n</code></pre>"},{"location":"compounds/Violin/","title":"Compound.Violin","text":"<p>Generates a Violin Plot compound SVG Visual showing distribution density using Kernel Density Estimation (KDE)</p> Kernel Density Estimation (KDE) <p>KDE creates a smooth estimate of your data's probability density by placing a \"kernel\" (normal distribution curve) at each data point and summing them together. The violin plot displays this density as a symmetrical shape - wider areas indicate higher probability/frequency of values.</p> <p>Key Parameters:</p> <ul> <li> <p>Samples: Controls the resolution of the density calculation (higher = smoother, but slower performance)</p> </li> <li> <p>Bandwidth: Controls how much each data point influences nearby areas. Smaller bandwidth values create sharper, more detailed curves that closely follow individual data points. Larger bandwidth values create smoother, more generalized shapes that show overall trends</p> </li> </ul> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Compound.Violin( x, y, width, height, paddingX, paddingY, axisRef, measureRef, samples, bandwidth, color )\n</code></pre> Parameter Type Required Description x INT64 The x position of the compound y INT64 The y position of the compound width INT64 The width of the compound height INT64 The height of the compound paddingX DOUBLE The horizontal padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) paddingY DOUBLE The vertical padding percentage (0.0-1.0, e.g., 0.1 = 10% padding) axisRef ANYREF EXPR The column that the measure will be evaluated against measureRef NUMERIC EXPR The measure to evaluate samples INT64 Number of density calculation points bandwidth NUMERIC Kernel bandwidth for smoothing color STRING Fill color for the violin shape <p>STRING An SVG violin plot showing the probability density of data using kernel density estimation</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    BLANK(),\n    DaxLib.SVG.Compound.Violin(\n        0,                  // x\n        0,                  // y\n        500,                // width\n        100,                // height\n        0.05,               // paddingX\n        0.02,               // paddingY\n        Dates[Date],        // axisRef\n        [Total Cost],       // measureVal\n        MAX( Samples[Samples] ), // samples\n        MAX( Bandwidth[Bandwidth] ), // bandwidth\n        DaxLib.SVG.Colour.Theme(\n            \"Power BI\",\n            25\n        )                   // color\n    ),\n    BLANK()\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Compound.Violin' =\n    (\n        x: INT64,\n        y: INT64,\n        width: INT64,\n        height: INT64,\n        paddingX: DOUBLE,\n        paddingY: DOUBLE,\n        axisRef: ANYREF EXPR,\n        measureRef: NUMERIC EXPR,\n        samples: INT64,\n        bandwidth: NUMERIC,\n        color: STRING\n    ) =&gt;\n\n        // Apply padding to dimensions\n        VAR _X =            x + (width * (IF(ISBLANK(paddingX), 0, paddingX) / 2))\n        VAR _Y =            y + (height * (IF(ISBLANK(paddingY), 0, paddingY) / 2))\n        VAR _Width =        width * (1 - IF(ISBLANK(paddingX), 0, paddingX))\n        VAR _Height =       height * (1 - IF(ISBLANK(paddingY), 0, paddingY))\n\n        // Check if Axis is numeric\n        VAR axisSample =    MAX( axisRef )\n        VAR axisIsNumeric = ISNUMERIC( axisSample ) || ISDATETIME( axisSample )\n\n        // For totals\n        VAR _Data = \n            ADDCOLUMNS(\n                FILTER(\n                    VALUES( axisRef ),\n                    NOT ISBLANK( measureRef )\n                ),\n                \"@AxisIndex\",   \n                    IF(\n                        axisIsNumeric,\n                        axisRef,\n                        RANK( DENSE, CALCULATETABLE( VALUES( axisRef ), ALLSELECTED() ) )\n                    ),\n                \"@Value\", measureRef\n            )\n\n        VAR _NumValues =        COUNTROWS( _Data )\n        VAR _Min =              MINX( _Data, [@Value] )\n        VAR _Max =              MAXX( _Data, [@Value] )\n        VAR _Range =            _Max - _Min\n        VAR _RangePerSample =   _Range / samples\n\n        // Calculate Kernel Density Estimation using Normal distribution\n        VAR _KDE = \n            ADDCOLUMNS(\n                GENERATESERIES( 0, samples + 1, 1 ),\n                \"@InputX\", _Min + _RangePerSample * [Value],\n                \"@KDE\", \n                    ( 1 / _NumValues ) * \n                    SUMX(\n                        _Data, \n                        NORM.DIST( \n                            _Min + _RangePerSample * [Value], \n                            [@Value], \n                            bandwidth, \n                            FALSE \n                        ) \n                    )\n            )\n\n        VAR _MaxKDE =       MAXX( _KDE, [@KDE] )\n\n        // Map KDE values to SVG coordinates using normalize function\n        VAR _Points = \n            ADDCOLUMNS(\n                _KDE,\n                \"@X\", DaxLib.SVG.Scale.Normalize( [@InputX], _Min, _Max, _X, _X + _Width),\n                \"@Y\", DaxLib.SVG.Scale.Normalize( [@KDE], 0, _MaxKDE, _Y + _Height * 0.5, _Y )\n            )\n\n        // Create control points for smooth B\u00e9zier curves\n        VAR _PointsWithPrev = \n            NATURALLEFTOUTERJOIN(\n                _Points,\n                SELECTCOLUMNS(\n                    _Points,\n                    \"Value\", [Value] + 1,\n                    \"@PrevX\", [@X],\n                    \"@PrevY\", [@Y]\n                )\n            )\n\n        VAR _WithControlPoints = \n            ADDCOLUMNS(\n                _PointsWithPrev,\n                \"@CX\", [@prevX] + ( ( [@x] - [@prevX] ) / 2 ),\n                \"@CY\", [@y]\n            )\n\n        // Create the violin shape as a single closed path\n        // Start at the center-left, go up the top curve, then down the bottom curve, and close\n        VAR _FirstPoint = MINX( _Points, [@X] )\n        VAR _LastPoint = MAXX( _Points, [@X] )\n        VAR _CenterY = _Y + (_Height * 0.5)\n\n        // Top half curve (from left to right)\n        VAR _TopCurve = \n            CONCATENATEX(\n                _WithControlPoints,\n                IF(\n                    [Value] = 0,\n                    \"M \" &amp; [@X] &amp; \" \" &amp; _CenterY &amp; \" L \" &amp; [@X] &amp; \" \" &amp; [@Y],\n                    \"S \" &amp; [@CX] &amp; \" \" &amp; [@CY] &amp; \", \" &amp; [@X] &amp; \" \" &amp; [@Y]\n                ),\n                \" \",\n                [Value],\n                ASC\n            )\n\n        // Bottom half curve (from right to left, mirrored)\n        VAR _BottomCurve = \n            CONCATENATEX(\n                _WithControlPoints,\n                VAR _MirroredY = _CenterY + (_CenterY - [@Y])\n                VAR _MirroredCY = _CenterY + (_CenterY - [@CY])\n                RETURN\n                    \"S \" &amp; [@CX] &amp; \" \" &amp; _MirroredCY &amp; \", \" &amp; [@X] &amp; \" \" &amp; _MirroredY,\n                \" \",\n                [Value],\n                DESC\n            )\n\n        // Create a single closed path for the violin shape\n        VAR _ViolinPath = \n            _TopCurve &amp; \n            \" \" &amp; _BottomCurve &amp; \n            \" Z\" // Close the path\n\n        // Combined Elements\n        VAR _CombinedElements = \n            DaxLib.SVG.Element.Paths(\n                _ViolinPath, // d\n                DaxLib.SVG.Attr.Shapes(\n                    color,          // fill\n                    0.5,            // fillOpacity\n                    BLANK(),        // fillRule\n                    color,          // stroke\n                    1,              // strokeWidth\n                    BLANK(),        // strokeOpacity\n                    BLANK()         // opacity\n                ),\n                BLANK()             // transforms\n            )\n\n        RETURN\n\n            IF( NOT ISEMPTY( _Data ), _CombinedElements )\n</code></pre>"},{"location":"defs/","title":"Defs","text":"<p>This section documents SVG definition (defs) functions, which allow you to define reusable SVG elements such as <code>&lt;linearGradient&gt;</code>, <code>&lt;clipPath&gt;</code>, and shapes. Shapes can be reused by invoking them with <code>DaxLib.SVG.Element.UseDef()</code>, providing the matching id. The use of Defs to define Shapes which are invoked multiple times can reduce overall SVG string length and improve performance in Power BI.</p> <p>Defining Defs</p> <p><code>DaxLib.SVG.Def.*</code> should be wrapped in <code>DaxLib.SVG.Element.Defs()</code> to add <code>&lt;defs&gt;...&lt;/defs&gt;</code> tags.</p> <pre><code>DaxLib.SVG.Element.Defs(\n        DaxLib.SVG.Def.Circle(...) &amp;\n        DaxLib.SVG.Def.Rect(...)\n)\n// Returns: &lt;defs&gt;...&lt;/defs&gt;\n</code></pre> ClipPathLinearGradientRadialGradient <p></p> <p></p> <p></p>"},{"location":"defs/Circle/","title":"Def.Circle","text":"<p>Generates a reusable <code>&lt;circle&gt;</code> definition</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.Circle( defId, cx, cy, r, attributes, transforms )\n</code></pre> Name Type Required Description defId STRING The unique identifier for the circle cx STRING X center coordinate cy STRING Y center coordinate r STRING Radius attributes STRING Direct SVG attributes to apply (e.g., \"fill='none' stroke='blue'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;circle&gt;</code> definition</p> <pre><code>DaxLib.SVG.Def.Circle(\n    \"myCircle\", \n    \"50\", \n    \"50\", \n    \"40\", \n    DaxLib.SVG.Attr.Shapes(\n        \"red\",      // fill\n        BLANK(),    // fillOpacity\n        BLANK(),    // fillRule\n        \"blue\",     // stroke\n        2,          // strokeWidth\n        BLANK(),    // strokeOpacity\n        BLANK()     // opacity\n    ), \n    BLANK()\n)\n// Returns: &lt;circle id='myCircle' cx='50' cy='50' r='40' fill='red' stroke='blue' stroke-width='2' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.Circle' = \n    (\n        defId: STRING,\n        cx: STRING,\n        cy: STRING,  \n        r: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;circle id='\" &amp; defId &amp; \"'\" &amp;\n        \" cx='\" &amp; cx &amp; \"'\" &amp;\n        \" cy='\" &amp; cy &amp; \"'\" &amp;\n        \" r='\" &amp; r &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp;\n        \"/&gt;\"\n</code></pre>"},{"location":"defs/ClipPath/","title":"Def.ClipPath","text":"<p>Generates a reusable <code>&lt;clipPath&gt;</code> definition</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.ClipPath( defId, contents )\n</code></pre> Name Type Required Description defId STRING Yes The unique identifier for the clip path. (Example: \"cut-top\", \"mask-circle\") contents STRING Yes The SVG element(s) that make up the clipping path (typically a single shape) <p>STRING <code>&lt;clipPath&gt;</code> definition</p> <pre><code>VAR _Defs = \n    DaxLib.SVG.Element.Defs(\n        DaxLib.SVG.Def.ClipPath(\n            \"clip-circle\",      // id\n            DaxLib.SVG.Element.Circle(\n                \"50%\",          // cx \n                \"80%\",          // cy\n                8,              // r\n                BLANK(),        // attributes\n                BLANK()         // transforms\n            )                   // elements\n        )\n    )\n\nVAR _Rectangle = \n    DaxLib.SVG.Element.Rect(\n        \"0%\",           // x\n        \"0%\",           // y\n        \"100%\",         // width\n        \"80%\",          // height\n        BLANK(),        // rx\n        BLANK(),        // ry\n        DaxLib.SVG.Attr.Shapes(\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),          // fill\n            BLANK(),    // fillOpacity\n            BLANK(),    // fillRule   \n            BLANK(),    // stroke\n            BLANK(),    // strokeWidth\n            BLANK(),    // strokeOpacity\n            BLANK()     // opacity\n        ) &amp;\n        \"clip-path='url(#clip-circle)'\",  // Add clip-path reference\n        BLANK()         // transforms\n    )\n\nRETURN\nDaxLib.SVG.SVG(\n    500,\n    100,\n    \"0 0 100 20\",\n    _Defs &amp;          \n    _Rectangle,    \n    BLANK()         \n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.ClipPath' =\n    (\n        defId : STRING,\n        contents: STRING\n    ) =&gt;\n\n        \"&lt;clipPath id='\" &amp; defId &amp; \"'&gt;\" &amp;\n        contents &amp;\n        \"&lt;/clipPath&gt;\"\n</code></pre>"},{"location":"defs/GradientStop/","title":"Def.GradientStop","text":"<p>Generates a gradient <code>&lt;stop&gt;</code> element for use in SVG gradients</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.GradientStop( offset, color, opacity )\n</code></pre> Name Type Required Description offset STRING Stop position color STRING color value (hex or named color) opacity STRING opacity value <p>STRING <code>&lt;stop&gt;</code> element</p> <pre><code>DaxLib.SVG.Def.GradientStop(\"0%\", \"red\", \"1\")\n// Returns: &lt;stop offset='0%' stop-color='red' stop-opacity='1'/&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.GradientStop' = \n    (\n        offset: STRING,\n        color: STRING,\n        opacity: STRING\n    ) =&gt;\n\n        \"&lt;stop offset='\" &amp; offset &amp; \n        \"' stop-color='\" &amp; color &amp; \"'\" &amp;\n        IF( NOT ISBLANK( opacity ), \" stop-opacity='\" &amp; opacity &amp; \"'\" ) &amp;\n        \"/&gt;\"\n</code></pre>"},{"location":"defs/Line/","title":"Def.Line","text":"<p>Generates a reusable <code>&lt;line&gt;</code> definition</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.Line( defId, x1, y1, x2, y2, attributes, transforms )\n</code></pre> Name Type Required Description defId STRING The unique identifier for the line x1 STRING The x position of the start point y1 STRING The y position of the start point x2 STRING The x position of the end point y2 STRING The y position of the end point attributes STRING Direct SVG attributes to apply (e.g., \"stroke-width='2' stroke='blue'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;line&gt;</code> definition</p> <pre><code>DaxLib.SVG.Def.Line(\n    \"myLine\",\n    \"0\",\n    \"0\",\n    \"100\",\n    \"100\",\n    DaxLib.SVG.Attr.Stroke(\n        \"black\",    // stroke\n        2,          // strokeWidth\n        BLANK(),    // strokeOpacity\n        BLANK(),    // strokeDasharray\n        BLANK(),    // strokeDashoffset\n        BLANK(),    // strokeLinecap\n        BLANK(),    // strokeLinejoin\n        BLANK(),    // strokeMiterlimit\n        BLANK(),    // markerStart\n        BLANK(),    // markerMid\n        BLANK()     // markerEnd\n    ),\n    BLANK()\n)\n// Returns: &lt;line id='myLine' x1='0' y1='0' x2='100' y2='100' stroke='black' stroke-width='2' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.Line' = \n    (\n        defId: STRING,\n        x1: STRING,\n        y1: STRING,\n        x2: STRING,\n        y2: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;line id='\" &amp; defId &amp; \"'\" &amp;\n        \" x1='\" &amp; x1 &amp; \"'\" &amp;\n        \" y1='\" &amp; y1 &amp; \"'\" &amp;\n        \" x2='\" &amp; x2 &amp; \"'\" &amp;\n        \" y2='\" &amp; y2 &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp;\n        \"/&gt;\"\n</code></pre>"},{"location":"defs/LinearGradient/","title":"Def.LinearGradient","text":"<p>Generates a reusable <code>&lt;linearGradient&gt;</code> definition</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.LinearGradient( defId, stops, x1, y1, x2, y2 )\n</code></pre> Name Type Required Description defId STRING The unique identifier for the gradient stops STRING Concatenated list of one or more <code>DaxLib.SVG.Def.GradientStop</code> elements x1 STRING Start X position y1 STRING Start Y position x2 STRING End X position y2 STRING End Y position <p>STRING <code>&lt;linearGradient&gt;</code> definition</p> <pre><code>DaxLib.SVG.SVG(\n    500,\n    100,\n    \"0 0 100 20\",\n    DaxLib.SVG.Element.Defs(\n        DaxLib.SVG.Def.LinearGradient(\n            \"myGradient\",   // id\n            DaxLib.SVG.Def.GradientStop(\n                \"20%\",      // offset\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    25\n                ),          // colour\n                BLANK()     // opacity\n            ) &amp;\n            DaxLib.SVG.Def.GradientStop( \n                \"80%\",      // offset\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    26\n                ),           // colour\n                BLANK()     // opacity\n            ),              // stops\n            BLANK(),        // x1\n            BLANK(),        // y1\n            BLANK(),        // x2\n            BLANK()         // y2\n        )                   // contents\n    ) &amp;\n    DaxLib.SVG.Element.Rect(\n        2,                  // x\n        2,                  // y\n        \"80%\",              // width\n        \"80%\",              // height\n        BLANK(),            // rx\n        BLANK(),            // ry\n        DaxLib.SVG.Attr.Shapes(\n            \"url(\"\"\" &amp; \"#myGradient\" &amp; \"\"\")\", // fill\n            BLANK(),        // fillOpacity\n            BLANK(),        // fillRule   \n            BLANK(),        // stroke\n            BLANK(),        // strokeWidth\n            BLANK(),        // strokeOpacity\n            BLANK()         // opacity\n        ),                  // attributes\n        BLANK()             // transforms\n    ),\n    BLANK()                 // sortValue               \n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.LinearGradient' =\n    (\n        defId: STRING,\n        stops: STRING,\n        x1: STRING,\n        y1: STRING,\n        x2: STRING,\n        y2: STRING\n    ) =&gt;\n\n        \"&lt;linearGradient\" &amp;\n        \" id='\" &amp; defId &amp; \"'\" &amp;\n        IF( NOT ISBLANK( x1 ), \" x1='\" &amp; x1 &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( y1 ), \" y1='\" &amp; y1 &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( x2 ), \" x2='\" &amp; x2 &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( y2 ), \" y2='\" &amp; y2 &amp; \"'\" ) &amp;\n        \"&gt;\" &amp;\n        stops &amp;\n        \"&lt;/linearGradient&gt;\"\n</code></pre>"},{"location":"defs/Paths/","title":"Def.Paths","text":"<p>Generates a reusable <code>&lt;path&gt;</code> definition</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.Paths( defId, d, attributes, transforms )\n</code></pre> Name Type Required Description defId STRING The unique identifier for the path d STRING The path data string (e.g., \"M10 10 L90 90\") attributes STRING Direct SVG attributes to apply (e.g., \"fill='none' stroke='blue'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;path&gt;</code> definition</p> <pre><code>DaxLib.SVG.Def.Paths(\n    \"myPath\",\n    \"M10 10 L90 90\",\n    DaxLib.SVG.Attr.Shapes(\n        \"none\",     // fill\n        BLANK(),    // fillOpacity\n        BLANK(),    // fillRule\n        \"black\",    // stroke\n        2,          // strokeWidth\n        BLANK(),    // strokeOpacity\n        BLANK()     // opacity\n    ),\n    BLANK()\n)\n// Returns: &lt;path id='myPath' d='M10 10 L90 90' fill='none' stroke='black' stroke-width='2' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.Paths' =\n    (\n        defId: STRING,\n        d: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;path id='\" &amp; defId &amp; \"'\" &amp;\n        \" d='\" &amp; d &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp;\n        \"/&gt;\"\n</code></pre>"},{"location":"defs/RadialGradient/","title":"Def.RadialGradient","text":"<p>Generates a reusable <code>&lt;radialGradient&gt;</code> definition</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.RadialGradient( defId, stops, cx, cy, r, fx, fy, fr )\n</code></pre> Name Type Required Description defId STRING The unique identifier for the gradient stops STRING Concatenated list of one or more <code>DaxLib.SVG.Def.GradientStop</code> elements cx STRING Center X position cy STRING Center Y position r STRING Radius fx STRING Focus X position fy STRING Focus Y position fr STRING Focus radius <p>STRING <code>&lt;radialGradient&gt;</code> definition</p> <pre><code>DaxLib.SVG.SVG(\n    500,                    // width\n    100,                    // height\n    \"0 0 100 20\",           // viewbox\n    DaxLib.SVG.Element.Defs(\n        DaxLib.SVG.Def.RadialGradient(\n            \"myGradient\",   // id\n            DaxLib.SVG.Def.GradientStop( \n                \"10%\",      // offset\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    25\n                ),          // colour\n                BLANK()     // opacity\n            ) &amp;\n            DaxLib.SVG.Def.GradientStop( \n                \"80%\",      // offset\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    26\n                ),          // colour\n                0.5         // opacity\n            ) &amp;\n            DaxLib.SVG.Def.GradientStop( \n                \"95%\",      // offset\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    27\n                ),          // colour\n                BLANK()     // opacity\n            ),              // stops\n            BLANK(),        // cx\n            BLANK(),        // cy\n            BLANK(),        // r\n            BLANK(),        // fx\n            BLANK(),        // fy\n            BLANK()         // fr\n        )\n    ) &amp;\n    DaxLib.SVG.Element.Circle(\n        \"50%\",              // cx\n        \"50%\",              // cy\n        15,                 // r\n        DaxLib.SVG.Attr.Shapes(\n            \"url(\"\"\" &amp; \"#myGradient\" &amp; \"\"\")\", // fill\n            BLANK(),        // fillOpacity\n            BLANK(),        // fillRule   \n            BLANK(),        // stroke\n            BLANK(),        // strokeWidth\n            BLANK(),        // strokeOpacity\n            BLANK()         // opacity\n        ),                  // attributes\n        BLANK()             // transforms\n    ),                      // contents\n    BLANK()                 // sortODer\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.RadialGradient' =\n    (\n        defId: STRING,\n        stops: STRING,\n        cx: STRING,\n        cy: STRING,\n        r: STRING,\n        fx: STRING,\n        fy: STRING,\n        fr: STRING\n    ) =&gt;\n\n        \"&lt;radialGradient\" &amp;\n        \" id='\" &amp; defId &amp; \"'\" &amp;\n        IF( NOT ISBLANK( cx ), \" cx='\" &amp; cx &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( cy ), \" cy='\" &amp; cy &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( r ),  \" r='\" &amp; r &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( fx ), \" fx='\" &amp; fx &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( fy ), \" fy='\" &amp; fy &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( fr ), \" fr='\" &amp; fr &amp; \"'\" ) &amp;\n        \"&gt;\" &amp;\n        stops &amp;\n        \"&lt;/radialGradient&gt;\"\n</code></pre>"},{"location":"defs/Rect/","title":"Def.Rect","text":"<p>Generates a reusable <code>&lt;rect&gt;</code> definition</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Def.Rect( defId, width, height, rx, ry, attributes, transforms )\n</code></pre> Name Type Required Description defId STRING The unique identifier for the rectangle width STRING The width of the rectangle (pixels or percentage) height STRING The height of the rectangle (pixels or percentage) rx STRING X radius for rounded corners ry STRING Y radius for rounded corners attributes STRING Direct SVG attributes to apply (e.g., \"fill='none' stroke='blue'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;rect&gt;</code> definition</p> <pre><code>DaxLib.SVG.Def.Rect(\n    \"myRect\",\n    \"100\",\n    \"50\",\n    \"10\",\n    \"10\",\n    DaxLib.SVG.Attr.Shapes(\n        \"blue\",     // fill\n        BLANK(),    // fillOpacity\n        BLANK(),    // fillRule\n        \"black\",    // stroke\n        2,          // strokeWidth\n        BLANK(),    // strokeOpacity\n        BLANK()     // opacity\n    ),\n    BLANK()\n)\n// Returns: &lt;rect id='myRect' width='100' height='50' rx='10' ry='10' fill='blue' stroke='black' stroke-width='2' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Def.Rect' = \n    (\n        defId: STRING,\n        width: STRING,\n        height: STRING,\n        rx: STRING,\n        ry: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;rect id='\" &amp; defId &amp; \"'\" &amp;\n        \" width='\" &amp; width &amp; \"'\" &amp;\n        \" height='\" &amp; height &amp; \"'\" &amp;\n        IF(NOT ISBLANK( rx ), \" rx='\" &amp; rx &amp; \"'\" ) &amp; \n        IF(NOT ISBLANK( ry ), \" ry='\" &amp; ry &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp;\n        \"/&gt;\"\n</code></pre>"},{"location":"elements/","title":"Elements","text":"<p>This section documents the core SVG element functions available in DaxLib.SVG. These functions generate SVG primitives such as <code>&lt;circle&gt;</code>, <code>&lt;rect&gt;</code>, <code>&lt;line&gt;</code>, <code>&lt;polygon&gt;</code>, <code>&lt;polyline&gt;</code>, <code>&lt;text&gt;</code>, and <code>&lt;&lt;g&gt;</code>. Use these to build up complex SVG graphics in Power BI.</p> CirclelinePathsRectTxtUseDef <p></p> <p></p> <p></p> <p></p> <p>DaxLib</p> <p></p>"},{"location":"elements/Circle/","title":"Element.Circle","text":"<p>Generates a <code>&lt;circle&gt;</code> element</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Circle( cx, cy, r, attributes, transforms )\n</code></pre> Name Type Required Description cx STRING The x position of the center cy STRING The y position of the center r STRING The radius attributes STRING Direct SVG attributes to apply (e.g., \"fill='red' stroke-width='2'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;circle&gt;</code> element</p> <pre><code>DaxLib.SVG.SVG(\n    500,                // width\n    100,                // height\n    \"0 0 100 20\",       // viewbox\n    DaxLib.SVG.Element.Circle(\n        50,             // cx\n        10,             // cy\n        \"10%\",          // r\n        DaxLib.SVG.Attr.Shapes(\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),              // fill\n            0.5,            // fillOpacity\n            BLANK(),        // fillRule   \n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),              // stroke\n            1,              // strokeWidth\n            BLANK(),        // strokeOpacity\n            BLANK()         // opacity\n        ),              // attributes\n        BLANK()         // transforms\n    ),                  // contents\n    BLANK()             // sortValue\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Circle' = \n    (\n        cx: STRING,\n        cy: STRING,\n        r: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;circle\" &amp;\n        \" cx='\" &amp; cx &amp; \"'\" &amp;\n        \" cy='\" &amp; cy &amp; \"'\" &amp;\n        \" r='\" &amp; r &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Defs/","title":"Element.Defs","text":"<p>Generates a <code>&lt;defs&gt;</code> element from one or more <code>DaxLib.SVG.Def.*</code> elements</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Defs( defs )\n</code></pre> Name Type Required Description defs STRING Concatenated list of def elements to include in a defs block <p>STRING <code>&lt;defs&gt;</code> element</p> <pre><code>DaxLib.SVG.Element.Defs(\n    DaxLib.SVG.Def.Circle(...) &amp;\n    DaxLib.SVG.Def.Rect(...)\n)\n// Returns: &lt;defs&gt;...&lt;/defs&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Defs' = \n    (\n        defs: STRING\n    ) =&gt;\n\n        \"&lt;defs&gt;\" &amp;\n        defs &amp;\n        \"&lt;/defs&gt;\"\n</code></pre>"},{"location":"elements/Ellipse/","title":"Element.Ellipse","text":"<p>Generates an <code>&lt;ellipse&gt;</code> element</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Ellipse( cx, cy, rx, ry, attributes, transforms )\n</code></pre> Name Type Required Description cx STRING The x position of the center cy STRING The y position of the center rx STRING The x radius ry STRING The y radius attributes STRING Direct SVG attributes to apply, can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;ellipse&gt;</code> element</p> <pre><code>DaxLib.SVG.Element.Ellipse(\n    \"50\", \n    \"50\", \n    \"40\", \n    \"20\", \n    DaxLib.SVG.Attr.Shapes(\"#0078D4\", BLANK(), BLANK(), BLANK(), BLANK(), BLANK(), BLANK()), \n    BLANK()\n)\n// Returns: &lt;ellipse cx='50' cy='50' rx='40' ry='20' fill='#0078D4' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Ellipse' = \n    (\n        cx: STRING,\n        cy: STRING,\n        rx: STRING,\n        ry: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;ellipse\" &amp;\n        \" cx='\" &amp; cx &amp; \"'\" &amp;\n        \" cy='\" &amp; cy &amp; \"'\" &amp;\n        \" rx='\" &amp; rx &amp; \"'\" &amp;\n        \" ry='\" &amp; ry &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Group/","title":"Element.Group","text":"<p>Generates a <code>&lt;g&gt;</code> element. Transformations applied to the <code>&lt;g&gt;</code> element are performed on its child elements, and its attributes are inherited by its children. It can also group multiple elements to be referenced later with the <code>&lt;use&gt;</code> element.</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Group( contents, transform, opacity )\n</code></pre> Name Type Required Description contents STRING Content to group transform STRING Transform (e.g., \"translate(50,50) rotate(45)\") opacity STRING Opacity for entire group (0-1) <p>STRING <code>&lt;g&gt;</code> element</p> <pre><code>DaxLib.SVG.Element.Group(\n    \"&lt;circle ... /&gt;\", \n    \"translate(10,10)\", \n    0.8\n    )\n// Returns: &lt;g transform='translate(10,10)' opacity='0.8'&gt;&lt;circle ... /&gt;&lt;/g&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Group' =\n    (\n        contents : SCALAR VAL,\n        transform : SCALAR VAL,\n        opacity : SCALAR VAL\n    ) =&gt;\n\n        \"&lt;g\" &amp;\n        \" transform='\" &amp; transform &amp; \"'\" &amp;\n        \" opacity='\" &amp; opacity &amp; \"'\" &amp;\n        \"&gt;\" &amp; contents &amp; \"&lt;/g&gt;\"\n</code></pre>"},{"location":"elements/Line/","title":"Element.Line","text":"<p>Generates a <code>&lt;line&gt;</code> element</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Line( x1, y1, x2, y2, attributes, transforms )\n</code></pre> Name Type Required Description x1 STRING Starting X position (left edge is 0) y1 STRING Starting Y position (top edge is 0) x2 STRING Ending X position (left edge is 0) y2 STRING Ending Y position (top edge is 0) attributes STRING Direct SVG attributes to apply (e.g., \"stroke-dasharray='5,5' marker-end='url(#arrow)'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;line&gt;</code> element</p> <pre><code>DaxLib.SVG.SVG(\n    500,                // width\n    100,                // height\n    \"0 0 100 20\",       // viewbox\n    DaxLib.SVG.Element.Line(\n        1,              // x1\n        5,              // y1\n        80,             // x2\n        5,              // y2\n        DaxLib.SVG.Attr.Shapes(\n            BLANK(),    // fill\n            BLANK(),    // fillOpacity\n            BLANK(),    // fillRule\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),          // stroke\n            2,          // strokeWidth\n            BLANK(),    // strokeOpacity\n            BLANK()     // opacity\n        ),              // attributes\n        BLANK()         // transforms\n    ),                  // contents\n    BLANK()             // sortValue\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Line' =\n    (\n        x1: STRING,\n        y1: STRING,\n        x2: STRING,\n        y2: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;  \n\n        \"&lt;line\" &amp;\n        \" x1='\" &amp; x1 &amp; \"'\" &amp;\n        \" y1='\" &amp; y1 &amp; \"'\" &amp;\n        \" x2='\" &amp; x2 &amp; \"'\" &amp;\n        \" y2='\" &amp; y2 &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Paths/","title":"Element.Paths","text":"<p>Generates a <code>&lt;path&gt;</code> element</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Paths( d, attributes, transforms )\n</code></pre> Name Type Required Description d STRING The path data string (e.g., \"M10 10 L90 90\") attributes STRING Direct SVG attributes to apply (e.g., \"pathLength='100' fill-rule='evenodd'\"), can generate with <code>DaxLib.SVG.Attr.*</code>or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;path&gt;</code> element</p> <pre><code>DaxLib.SVG.SVG(\n    500,                // width\n    100,                // height\n    \"0 0 100 20\",       // viewbox\n    DaxLib.SVG.Element.Paths(\n        \"M10 10 L30 5 C50 0 70 20 90 15 L100 0\", // d\n        DaxLib.SVG.Attr.Shapes(\n            \"none\",     // fill\n            BLANK(),    // fillOpacity\n            BLANK(),    // fillRule\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),          // stroke\n            2,          // strokeWidth\n            BLANK(),    // strokeOpacity\n            BLANK()     // opacity\n        ),              // attributes\n        BLANK()         // transforms\n    ),                  // contents\n    BLANK()             // sortValue\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Paths' =\n    (\n        d: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;path d='\" &amp; d &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Polygon/","title":"Element.Polygon","text":"<p>Generates a <code>&lt;polygon&gt;</code> (closed shape) element</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Polygon( points, attributes, transforms )\n</code></pre> Name Type Required Description points STRING Space-separated x,y coordinate pairs (e.g., \"0,10 20,30 40,15\") attributes STRING Direct SVG attributes to apply (e.g., \"fill-rule='nonzero'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;polygon&gt;</code> element</p> <pre><code>DaxLib.SVG.Element.Polygon(\n    \"0,10 20,30 40,15\",\n    DaxLib.SVG.Attr.Shapes(\"#32CD32\", \"#800080\", \"1\", BLANK(), BLANK(), BLANK(), BLANK()),\n    \"rotate(10)\"\n)\n// Returns: &lt;polygon points='0,10 20,30 40,15' fill='#32CD32' stroke='#800080' stroke-width='1' transform='rotate(10)' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Polygon' =\n    (\n        points: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;polygon\" &amp;\n        \" points='\" &amp; points &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Polyline/","title":"Element.Polyline","text":"<p>Generates a <code>&lt;polyline&gt;</code> (connected points) element</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Polyline( points, attributes, transforms )\n</code></pre> Name Type Required Description points STRING Space-separated x,y coordinate pairs (e.g., \"0,10 20,30 40,15\") attributes STRING Direct SVG attributes to apply (e.g., \"marker-start='url(#dot)'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;polyline&gt;</code> element</p> <pre><code>DaxLib.SVG.Element.Polyline(\n    \"0,10 20,30 40,15\",\n    DaxLib.SVG.Attr.Lines(\"none\", \"#0078D4\", \"2\", BLANK(), BLANK(), BLANK(), BLANK()),\n    \"translate(5,5)\"\n)\n// Returns: &lt;polyline points='0,10 20,30 40,15' fill='none' stroke='#0078D4' stroke-width='2' transform='translate(5,5)' /&gt;\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Polyline' =\n    (\n        points: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;polyline\" &amp;\n        \" points='\" &amp; points &amp; \"'\" &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Rect/","title":"Element.Rect","text":"<p>Generates a <code>&lt;rect&gt;</code> element</p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Rect( x, y, width, height, rx, ry, attributes, transforms )\n</code></pre> Name Type Required Description x STRING The x position y STRING The y position width STRING The width (pixels or percentage) height STRING The height (pixels or percentage) rx STRING x radius for rounded corners ry STRING y radius for rounded corners attributes STRING Direct SVG attributes to apply (e.g., \"fill='red' stroke-width='2'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;rect&gt;</code> element</p> <pre><code>DaxLib.SVG.SVG( \n    500,                // width\n    100,                // height\n    \"0 0 100 20\",       // viewbox\n    DaxLib.SVG.Element.Rect(\n        \"50%\",          // x\n        \"0%\",           // y\n        \"40%\",          // width\n        8,              // height\n        blank(),        // rx\n        blank(),        // ry\n        DaxLib.SVG.Attr.Shapes(\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),          // fill\n            0.3,        // fillOpacity\n            BLANK(),    // fillRule\n            DaxLib.SVG.Colour.Theme(\n                \"Power BI\",\n                25\n            ),          // stroke\n            2,          // strokeWidth\n            0.9,        // strokeOpacity\n            BLANK()     // opacity\n        ),              // attributes\n        DaxLib.SVG.Transforms(\n            -15,        // translate\n            5,          // rotate\n            BLANK(),    // scale\n            -20,        // skewX\n            BLANK()     // skewY\n        )               // transforms\n    ),                  // contents\n    BLANK()             // sortValue\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Rect' =\n    (\n        x: STRING,\n        y: STRING,\n        width: STRING,\n        height: STRING,\n        rx: STRING,\n        ry: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;rect\" &amp;\n        \" x='\" &amp; x &amp; \"'\" &amp;\n        \" y='\" &amp; y &amp; \"'\" &amp;\n        \" width='\" &amp; width &amp; \"'\" &amp;\n        \" height='\" &amp; height &amp; \"'\" &amp;\n        IF( NOT ISBLANK( rx ), \" rx='\" &amp; rx &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( ry ), \" ry='\" &amp; ry &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"elements/Txt/","title":"Element.Txt","text":"<p>Generates a <code>&lt;text&gt;</code> SVG element</p> <p>DaxLib</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.Txt( x, y, txt, dx, dy, attributes, transforms )\n</code></pre> Name Type Required Description x STRING The x position of the text y STRING The y position of the text txt STRING The text content dx STRING x offset from position dy STRING y offset from position attributes STRING Direct SVG attributes to apply (e.g., \"text-anchor='middle' dominant-baseline='middle'\"), can generate with <code>DaxLib.SVG.Attr.*</code> or manually transforms STRING Additional transforms (e.g. \"scale(1.2) translate(10,10)\") (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;text&gt;</code> element</p> <pre><code>DaxLib.SVG.SVG( \n    500,                // width\n    100,                // height\n    \"0 0 100 20\",       // viewbox\n    DaxLib.SVG.Element.Txt(\n        10,             // x\n        10,             // y\n        \"DaxLib\",       // txt\n        0,              // dx\n        0,              // dy\n        DaxLib.SVG.Attr.Txt(\n            \"Arial\",    // fontFamily\n            12,         // fontSize\n            BLANK(),    // fontWeight\n            BLANK(),    // fontStyle\n            BLANK(),    // textAnchor\n            BLANK(),    // baseline\n            BLANK(),    // textDecoration\n            BLANK(),    // letterSpacing\n            BLANK()     // wordSpacing\n        ),              // attributes\n        BLANK()         // transforms\n    ),                  // contents\n    BLANK()             // sortValue\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.Txt' =\n    (\n        x: STRING,\n        y: STRING,\n        txt: STRING,\n        dx: STRING,\n        dy: STRING,\n        attributes: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;text\" &amp;\n        \" x='\" &amp; x &amp; \"'\" &amp;\n        \" y='\" &amp; y &amp; \"'\" &amp;\n        IF(NOT ISBLANK( dx ), \" dx='\" &amp; dx &amp; \"'\" ) &amp; \n        IF(NOT ISBLANK( dy ), \" dy='\" &amp; dy &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( attributes ), \" \" &amp; attributes &amp; \" \" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp;\n        \"&gt;\" &amp; txt &amp; \n        \"&lt;/text&gt;\"\n</code></pre>"},{"location":"elements/UseDef/","title":"Element.UseDef","text":"<p>Applies a previously defined <code>DaxLib.SVG.Def.*</code> shape element (ie. <code>&lt;rect&gt;</code>, <code>&lt;circle&gt;</code>, <code>&lt;line&gt;</code>, via <code>&lt;use&gt;</code></p> <p></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Element.UseDef( defId, x, y, transforms )\n</code></pre> Name Type Required Description defId STRING The identifier of the defined element to use x STRING X position where the element should be placed y STRING Y position where the element should be placed transforms STRING Transformation to apply (can be generated with <code>DaxLib.SVG.Transforms</code>) <p>STRING <code>&lt;use&gt;</code> element</p> <pre><code>VAR _Defs =\n    DaxLib.SVG.Element.Defs(\n        DaxLib.SVG.Def.Circle(\n            \"Circle1\",      // id\n            0,              // cx\n            0,              // cy\n            8,              // r\n            DaxLib.SVG.Attr.Shapes(\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    25\n                ),          // fill\n                0.8,        // fillOpacity\n                BLANK(),    // fillRule\n                \"black\",    // stroke\n                1,          // strokeWidth\n                0.8,        // strokeOpacity\n                BLANK()     // opacity\n            ),              // attributes\n            BLANK()         // transforms\n        ) &amp;\n        DaxLib.SVG.Def.Circle(\n            \"Circle2\",      // id\n            0,              // cx\n            0,              // cy\n            8,              // r\n            DaxLib.SVG.Attr.Shapes(\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    26\n                ),          // fill\n                0.8,        // fillOpacity\n                BLANK(),    // fillRule\n                \"black\",    // stroke\n                1,          // strokeWidth\n                0.8,        // strokeOpacity\n                BLANK()     // opacity\n            ),              // attributes\n            BLANK()         // transforms\n        ) &amp;\n        DaxLib.SVG.Def.Paths(\n            \"myPath\",       // id\n            \"M10 10 L30 5 L90 15 L100 0\", // d\n            DaxLib.SVG.Attr.Shapes(\n                \"none\",     // fill\n                0.8,        // fillOpacity\n                BLANK(),    // fillRule\n                DaxLib.SVG.Colour.Theme(\n                    \"Power BI\",\n                    25\n                ),          // stroke\n                BLANK(),    // strokeWidth\n                BLANK(),    // strokeOpacity\n                BLANK()     // opacity\n            ),              // attributes\n            BLANK()         // transforms\n        )\n    )\nVAR _Contents = \n    _Defs &amp;\n    DaxLib.SVG.Element.UseDef(\n        \"Circle1\",   // id\n        20,             // x\n        10,             // y\n        DaxLib.SVG.Transforms(\n            BLANK(),    // translate\n            30,         // rotate\n            BLANK(),    // scale\n            BLANK(),    // skewX\n            BLANK()     // skewY\n        )               // transforms\n    ) &amp;\n    DaxLib.SVG.Element.UseDef(\n        \"Circle2\",      // id\n        50,             // x\n        10,             // y\n        BLANK()         // transforms\n    ) &amp;\n    DaxLib.SVG.Element.UseDef(\n        \"Circle1\",      // id\n        80,             // x\n        10,             // y\n        BLANK()         // transforms\n    ) &amp;\n    DaxLib.SVG.Element.UseDef(\n        \"myPath\",       // id\n        BLANK(),        // x\n        5,              // y\n        BLANK()         // transforms\n    ) &amp;\n    DaxLib.SVG.Element.UseDef(\n        \"myPath\",       // id\n        BLANK(),        // x\n        10,             // y\n        DaxLib.SVG.Transforms(\n            BLANK(),    // translate\n            -10,        // rotate\n            BLANK(),    // scale\n            BLANK(),    // skewX\n            BLANK()     // skewY\n        )               // transforms\n    )\n\nRETURN\nDaxLib.SVG.SVG(\n    500,                // width\n    100,                // height\n    \"0 0 100 20\",       // viewbox\n    _Contents,          // contents\n    BLANK()             // sortValue\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.Element.UseDef' = \n    (\n        defId: STRING,\n        x: STRING,\n        y: STRING,\n        transforms: STRING\n    ) =&gt;\n\n        \"&lt;use\" &amp;\n        \" href='#\" &amp; defId &amp; \"'\" &amp;\n        IF( NOT ISBLANK( x ), \" x='\" &amp; x &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( y ), \" y='\" &amp; y &amp; \"'\" ) &amp;\n        IF( NOT ISBLANK( transforms ), \" transform='\" &amp; transforms &amp; \"'\" ) &amp; \n        \"/&gt;\"\n</code></pre>"},{"location":"functions/","title":"Functions","text":"<ul> <li> <p> SVG Wrapper </p> <p>Wraps one or more <code>Elements</code>, <code>Defs</code>, <code>Compounds</code>, applying required metadata and <code>&lt;SVG&gt;</code> tags</p> </li> <li> <p> Elements</p> <p>SVG primitives (i.e. <code>&lt;Rect&gt;</code>, <code>&lt;Circle&gt;</code>, <code>&lt;line&gt;</code>)</p> </li> <li> <p> Compounds </p> <p>Complex <code>Compound</code> components (i.e. boxplot, violin) made from <code>Elements</code></p> </li> <li> <p> Defs</p> <p>Define reusable SVG elements (i.e. <code>&lt;linearGradient&gt;</code>, <code>&lt;clipPath&gt;</code>, and shapes). </p> </li> <li> <p> Attr</p> <p>Create Attributes (i.e.fill, stroke, opacity) string that can applied to <code>Elements</code> and <code>Defs</code></p> </li> <li> <p> Transforms</p> <p>Create Transform strings</p> </li> <li> <p> Scales</p> <p>Mapping values between scales</p> </li> <li> <p> Colors </p> <p>Themes and functions for colour manipulation.</p> </li> </ul>"},{"location":"scales/","title":"Scales","text":"<p>This section covers scaling and normalization functions for mapping data values to SVG coordinates, colors, and other properties. These are useful for mapping from data scale to visual scale.</p>"},{"location":"scales/Normalize/","title":"Scale.Normalize","text":"<p>Maps a value from one scale to another. Used for scaling values to fit within SVG dimensions</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Scale.Normalize( inputValue, fromMin, fromMax, toMin, toMax )\n</code></pre> Name Type Required Description inputValue NUMERIC VAL The value to map fromMin NUMERIC VAL The minimum value of the original scale fromMax NUMERIC VAL The maximum value of the original scale toMin NUMERIC VAL The minimum value of the new scale toMax NUMERIC VAL The maximum value of the new scale <p>NUMERIC mapped value</p> <pre><code>DaxLib.SVG.Scale.Normalize(50, 0, 200, 0, 100) \n// Returns 25\n</code></pre> <pre><code>function 'DaxLib.SVG.Scale.Normalize' =\n    (\n        inputValue: NUMERIC VAL,\n        fromMin: NUMERIC VAL,\n        fromMax: NUMERIC VAL,\n        toMin: NUMERIC VAL,\n        toMax: NUMERIC VAL\n    ) =&gt;\n\n        ( ( inputValue - fromMin ) / ( fromMax - fromMin ) ) * ( toMax - toMin ) + toMin\n</code></pre>"},{"location":"svg/","title":"SVG","text":"<p>The <code>DaxLib.SVG.SVG</code> function wraps your SVG content in a valid SVG container for use in Power BI visuals. All <code>DaxLib.SVG.Element.*</code> and <code>DaxLib.SVG.Compound.*</code> functions should be wrapped in this function to ensure correct metadata and rendering.</p> <pre><code>    DaxLib.SVG.SVG(\n        \"100\",\n        \"100\",\n        \"viewBox='0 0 100 100' \",\n        DaxLib.SVG.Element.Circle(\"50\", \"50\", \"40\", \"fill:blue;\", BLANK(), BLANK()),\n        1\n    )\n</code></pre>"},{"location":"svg/SVG/","title":"SVG","text":"<p>Wraps content in an SVG container for Power BI visualization</p> <p>Tip</p> <p>Any measures use these UDFs must have <code>DataCategory = \"ImageUrl\"</code></p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.SVG( width, height, viewbox, contents, sortValue)\n</code></pre> Name Type Required Description width STRING Width (pixels or percentage) height STRING Height (pixels or percentage) viewbox STRING viewBox (e.g., \"0 0 100 100\") contents STRING SVG elements to include (e.g., from DaxLib.SVG.Element functions) sortValue EXPR Sort value for ordering in tables <p>STRING SVG string</p> <pre><code>DaxLib.SVG.SVG(\n    \"100\",\n    \"100\",\n    \"viewBox='0 0 100 100' \",\n    DaxLib.SVG.Element.Circle(\"50\", \"50\", \"40\", \"fill:blue;\", BLANK(), BLANK()),\n    1\n)\n</code></pre> <pre><code>function 'DaxLib.SVG.SVG' =\n    (\n        width : STRING,\n        height : STRING,\n        viewbox : STRING,\n        contents : STRING,\n        sortValue : EXPR\n    ) =&gt;\n\n        VAR _Canvas =   IF( NOT ISBLANK( width ) &amp;&amp; NOT ISBLANK( height ), \"width='\" &amp; width &amp; \"' height='\" &amp; height &amp; \"' \" )\n        VAR _SortDesc = IF( NOT ISBLANK( sortValue ), \"&lt;desc&gt;\" &amp; FORMAT( sortValue, \"000000000000\" ) &amp; \"&lt;/desc&gt;\" )\n\n        RETURN \n\n            \"data:image/svg+xml;utf8,\" &amp;\n            \"&lt;svg \" &amp;\n            _Canvas &amp;\n            viewbox &amp;\n            \"xmlns='http://www.w3.org/2000/svg'&gt;\" &amp;\n            _SortDesc &amp;\n            contents &amp;\n            \"&lt;/svg&gt;\"\n</code></pre>"},{"location":"transforms/","title":"Transforms","text":"<p>Functions for creating SVG transform attribute values.</p>"},{"location":"transforms/Transforms/","title":"Transforms","text":"<p>Creates an SVG transform attribute value for applying multiple transformations to an element</p> SyntaxExampleDefinition <pre><code>DaxLib.SVG.Transforms(translate, rotate, scale, skewX, skewY)\n</code></pre> Parameter Type Required Description translate STRING Translation coordinates in the format \"x,y\" rotate STRING Rotation angle in degrees, or \"angle x y\" for rotation around a point scale STRING Scale factor, or \"x,y\" for different scaling in each dimension skewX STRING Horizontal skew angle in degrees skewY STRING Vertical skew angle in degrees <p>STRING A transform attribute value that can be used with the transform attribute of SVG elements.</p> <pre><code>DaxLib.SVG.Transforms(\"10,20\", \"45\", \"1.5\", \"\", \"\")\n// Returns: \"translate(10,20) rotate(45) scale(1.5)\"\n</code></pre> <pre><code>function 'DaxLib.SVG.Transforms' = \n    (\n        translate: STRING,\n        rotate: STRING,\n        scale: STRING,\n        skewX: STRING,\n        skewY: STRING\n    ) =&gt;\n\n        IF(NOT ISBLANK(translate),  \"translate(\" &amp; translate &amp; \") \") &amp;\n        IF(NOT ISBLANK(rotate),     \"rotate(\" &amp; rotate &amp; \") \") &amp;\n        IF(NOT ISBLANK(scale),      \"scale(\" &amp; scale &amp; \") \") &amp;\n        IF(NOT ISBLANK(skewX),      \"skewX(\" &amp; skewX &amp; \") \") &amp;\n        IF(NOT ISBLANK(skewY),      \"skewY(\" &amp; skewY &amp; \") \") \n</code></pre>"}]}